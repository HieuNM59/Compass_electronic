
compass_stm32f103c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800510c  0800510c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800510c  0800510c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800510c  0800510c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08005120  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08005120  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010333  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277a  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00032ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00033b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f63  00000000  00000000  00034a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012eab  00000000  00000000  0004c9fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c1dc  00000000  00000000  0005f8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eba82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004554  00000000  00000000  000ebad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080050cc 	.word	0x080050cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080050cc 	.word	0x080050cc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_f2iz>:
 8000bf8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bfc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c00:	d30f      	bcc.n	8000c22 <__aeabi_f2iz+0x2a>
 8000c02:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_f2iz+0x30>
 8000c0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c14:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c18:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1c:	bf18      	it	ne
 8000c1e:	4240      	negne	r0, r0
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr
 8000c28:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c2c:	d101      	bne.n	8000c32 <__aeabi_f2iz+0x3a>
 8000c2e:	0242      	lsls	r2, r0, #9
 8000c30:	d105      	bne.n	8000c3e <__aeabi_f2iz+0x46>
 8000c32:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c36:	bf08      	it	eq
 8000c38:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c3c:	4770      	bx	lr
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	4770      	bx	lr

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c48:	f000 fab4 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4c:	f000 f80d 	bl	8000c6a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c50:	f000 f8f6 	bl	8000e40 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c54:	f000 f84e 	bl	8000cf4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c58:	f000 f8c8 	bl	8000dec <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000c5c:	f000 f878 	bl	8000d50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  mainInit();
 8000c60:	f004 f810 	bl	8004c84 <mainInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mainProcess();
 8000c64:	f004 f8a0 	bl	8004da8 <mainProcess>
  {
 8000c68:	e7fc      	b.n	8000c64 <main+0x20>

08000c6a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b090      	sub	sp, #64	; 0x40
 8000c6e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c70:	f107 0318 	add.w	r3, r7, #24
 8000c74:	2228      	movs	r2, #40	; 0x28
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 fa1f 	bl	80050bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c94:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ca8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fe92 	bl	80029dc <HAL_RCC_OscConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cbe:	f000 f923 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2102      	movs	r1, #2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 f900 	bl	8002ee0 <HAL_RCC_ClockConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ce6:	f000 f90f 	bl	8000f08 <Error_Handler>
  }
}
 8000cea:	bf00      	nop
 8000cec:	3740      	adds	r7, #64	; 0x40
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000cfa:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <MX_I2C1_Init+0x54>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d00:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <MX_I2C1_Init+0x58>)
 8000d02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d32:	f000 fe85 	bl	8001a40 <HAL_I2C_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d3c:	f000 f8e4 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000028 	.word	0x20000028
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	000186a0 	.word	0x000186a0

08000d50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	463b      	mov	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 360;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d76:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d96:	4814      	ldr	r0, [pc, #80]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d98:	f002 fa3a 	bl	8003210 <HAL_TIM_Base_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000da2:	f000 f8b1 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000daa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	4619      	mov	r1, r3
 8000db2:	480d      	ldr	r0, [pc, #52]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000db4:	f002 fc04 	bl	80035c0 <HAL_TIM_ConfigClockSource>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dbe:	f000 f8a3 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000dd0:	f002 fdd6 	bl	8003980 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dda:	f000 f895 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2000007c 	.word	0x2000007c

08000dec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <MX_USART1_UART_Init+0x50>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e24:	f002 fe1c 	bl	8003a60 <HAL_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e2e:	f000 f86b 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000c4 	.word	0x200000c4
 8000e3c:	40013800 	.word	0x40013800

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e54:	4b29      	ldr	r3, [pc, #164]	; (8000efc <MX_GPIO_Init+0xbc>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a28      	ldr	r2, [pc, #160]	; (8000efc <MX_GPIO_Init+0xbc>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <MX_GPIO_Init+0xbc>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <MX_GPIO_Init+0xbc>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a22      	ldr	r2, [pc, #136]	; (8000efc <MX_GPIO_Init+0xbc>)
 8000e72:	f043 0320 	orr.w	r3, r3, #32
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <MX_GPIO_Init+0xbc>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0320 	and.w	r3, r3, #32
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_GPIO_Init+0xbc>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a1c      	ldr	r2, [pc, #112]	; (8000efc <MX_GPIO_Init+0xbc>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_GPIO_Init+0xbc>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_GPIO_Init+0xbc>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a16      	ldr	r2, [pc, #88]	; (8000efc <MX_GPIO_Init+0xbc>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_GPIO_Init+0xbc>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0308 	and.w	r3, r3, #8
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	4811      	ldr	r0, [pc, #68]	; (8000f00 <MX_GPIO_Init+0xc0>)
 8000eba:	f000 fd90 	bl	80019de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000ebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480c      	ldr	r0, [pc, #48]	; (8000f04 <MX_GPIO_Init+0xc4>)
 8000ed4:	f000 fbe8 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4619      	mov	r1, r3
 8000eee:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_GPIO_Init+0xc0>)
 8000ef0:	f000 fbda 	bl	80016a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef4:	bf00      	nop
 8000ef6:	3720      	adds	r7, #32
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40011000 	.word	0x40011000

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <Error_Handler+0x8>
	...

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6193      	str	r3, [r2, #24]
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_MspInit+0x60>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_MspInit+0x60>)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000

08000f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <HAL_I2C_MspInit+0x70>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d123      	bne.n	8000fe0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_I2C_MspInit+0x74>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a13      	ldr	r2, [pc, #76]	; (8000fec <HAL_I2C_MspInit+0x74>)
 8000f9e:	f043 0308 	orr.w	r3, r3, #8
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_I2C_MspInit+0x74>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0308 	and.w	r3, r3, #8
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fb0:	23c0      	movs	r3, #192	; 0xc0
 8000fb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb4:	2312      	movs	r3, #18
 8000fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <HAL_I2C_MspInit+0x78>)
 8000fc4:	f000 fb70 	bl	80016a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_I2C_MspInit+0x74>)
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_I2C_MspInit+0x74>)
 8000fce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd2:	61d3      	str	r3, [r2, #28]
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_I2C_MspInit+0x74>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010c00 	.word	0x40010c00

08000ff4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001004:	d113      	bne.n	800102e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_TIM_Base_MspInit+0x44>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <HAL_TIM_Base_MspInit+0x44>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_TIM_Base_MspInit+0x44>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	201c      	movs	r0, #28
 8001024:	f000 fa23 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001028:	201c      	movs	r0, #28
 800102a:	f000 fa3c 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <HAL_UART_MspInit+0x9c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d139      	bne.n	80010d0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HAL_UART_MspInit+0xa0>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <HAL_UART_MspInit+0xa0>)
 8001062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_UART_MspInit+0xa0>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_UART_MspInit+0xa0>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a18      	ldr	r2, [pc, #96]	; (80010dc <HAL_UART_MspInit+0xa0>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_UART_MspInit+0xa0>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800108c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001090:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	480f      	ldr	r0, [pc, #60]	; (80010e0 <HAL_UART_MspInit+0xa4>)
 80010a2:	f000 fb01 	bl	80016a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4619      	mov	r1, r3
 80010ba:	4809      	ldr	r0, [pc, #36]	; (80010e0 <HAL_UART_MspInit+0xa4>)
 80010bc:	f000 faf4 	bl	80016a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	2025      	movs	r0, #37	; 0x25
 80010c6:	f000 f9d2 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010ca:	2025      	movs	r0, #37	; 0x25
 80010cc:	f000 f9eb 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40013800 	.word	0x40013800
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010800 	.word	0x40010800

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112a:	f000 f889 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <TIM2_IRQHandler+0x10>)
 800113a:	f002 f939 	bl	80033b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000007c 	.word	0x2000007c

08001148 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <USART1_IRQHandler+0x10>)
 800114e:	f002 fd97 	bl	8003c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200000c4 	.word	0x200000c4

0800115c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	; (80011a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	; (80011ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800118e:	f7ff ffe5 	bl	800115c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001192:	f003 ff6f 	bl	8005074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001196:	f7ff fd55 	bl	8000c44 <main>
  bx lr
 800119a:	4770      	bx	lr
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011a4:	08005114 	.word	0x08005114
  ldr r2, =_sbss
 80011a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011ac:	2000015c 	.word	0x2000015c

080011b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_2_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_Init+0x28>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a07      	ldr	r2, [pc, #28]	; (80011dc <HAL_Init+0x28>)
 80011be:	f043 0310 	orr.w	r3, r3, #16
 80011c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c4:	2003      	movs	r0, #3
 80011c6:	f000 f947 	bl	8001458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ca:	200f      	movs	r0, #15
 80011cc:	f000 f808 	bl	80011e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d0:	f7ff fea0 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40022000 	.word	0x40022000

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_InitTick+0x54>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_InitTick+0x58>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f95f 	bl	80014c2 <HAL_SYSTICK_Config>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e00e      	b.n	800122c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d80a      	bhi.n	800122a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001214:	2200      	movs	r2, #0
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f000 f927 	bl	800146e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <HAL_InitTick+0x5c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000000 	.word	0x20000000
 8001238:	20000008 	.word	0x20000008
 800123c:	20000004 	.word	0x20000004

08001240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_IncTick+0x1c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_IncTick+0x20>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a03      	ldr	r2, [pc, #12]	; (8001260 <HAL_IncTick+0x20>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	20000008 	.word	0x20000008
 8001260:	20000108 	.word	0x20000108

08001264 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b02      	ldr	r3, [pc, #8]	; (8001274 <HAL_GetTick+0x10>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	20000108 	.word	0x20000108

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff fff0 	bl	8001264 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffe0 	bl	8001264 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000008 	.word	0x20000008

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4906      	ldr	r1, [pc, #24]	; (8001358 <__NVIC_EnableIRQ+0x34>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	; (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001424:	d301      	bcc.n	800142a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001426:	2301      	movs	r3, #1
 8001428:	e00f      	b.n	800144a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <SysTick_Config+0x40>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001432:	210f      	movs	r1, #15
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f7ff ff90 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <SysTick_Config+0x40>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <SysTick_Config+0x40>)
 8001444:	2207      	movs	r2, #7
 8001446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff2d 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff42 	bl	8001308 <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff90 	bl	80013b0 <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5f 	bl	800135c <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff35 	bl	8001324 <__NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffa2 	bl	8001414 <SysTick_Config>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014da:	b480      	push	{r7}
 80014dc:	b085      	sub	sp, #20
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d008      	beq.n	8001502 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2204      	movs	r2, #4
 80014f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e020      	b.n	8001544 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 020e 	bic.w	r2, r2, #14
 8001510:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152a:	2101      	movs	r1, #1
 800152c:	fa01 f202 	lsl.w	r2, r1, r2
 8001530:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
	...

08001550 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001562:	2b02      	cmp	r3, #2
 8001564:	d005      	beq.n	8001572 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2204      	movs	r2, #4
 800156a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	e051      	b.n	8001616 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 020e 	bic.w	r2, r2, #14
 8001580:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0201 	bic.w	r2, r2, #1
 8001590:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a22      	ldr	r2, [pc, #136]	; (8001620 <HAL_DMA_Abort_IT+0xd0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d029      	beq.n	80015f0 <HAL_DMA_Abort_IT+0xa0>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a20      	ldr	r2, [pc, #128]	; (8001624 <HAL_DMA_Abort_IT+0xd4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d022      	beq.n	80015ec <HAL_DMA_Abort_IT+0x9c>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a1f      	ldr	r2, [pc, #124]	; (8001628 <HAL_DMA_Abort_IT+0xd8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d01a      	beq.n	80015e6 <HAL_DMA_Abort_IT+0x96>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1d      	ldr	r2, [pc, #116]	; (800162c <HAL_DMA_Abort_IT+0xdc>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d012      	beq.n	80015e0 <HAL_DMA_Abort_IT+0x90>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_DMA_Abort_IT+0xe0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d00a      	beq.n	80015da <HAL_DMA_Abort_IT+0x8a>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1a      	ldr	r2, [pc, #104]	; (8001634 <HAL_DMA_Abort_IT+0xe4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d102      	bne.n	80015d4 <HAL_DMA_Abort_IT+0x84>
 80015ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015d2:	e00e      	b.n	80015f2 <HAL_DMA_Abort_IT+0xa2>
 80015d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015d8:	e00b      	b.n	80015f2 <HAL_DMA_Abort_IT+0xa2>
 80015da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015de:	e008      	b.n	80015f2 <HAL_DMA_Abort_IT+0xa2>
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e4:	e005      	b.n	80015f2 <HAL_DMA_Abort_IT+0xa2>
 80015e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ea:	e002      	b.n	80015f2 <HAL_DMA_Abort_IT+0xa2>
 80015ec:	2310      	movs	r3, #16
 80015ee:	e000      	b.n	80015f2 <HAL_DMA_Abort_IT+0xa2>
 80015f0:	2301      	movs	r3, #1
 80015f2:	4a11      	ldr	r2, [pc, #68]	; (8001638 <HAL_DMA_Abort_IT+0xe8>)
 80015f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	4798      	blx	r3
    } 
  }
  return status;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40020008 	.word	0x40020008
 8001624:	4002001c 	.word	0x4002001c
 8001628:	40020030 	.word	0x40020030
 800162c:	40020044 	.word	0x40020044
 8001630:	40020058 	.word	0x40020058
 8001634:	4002006c 	.word	0x4002006c
 8001638:	40020000 	.word	0x40020000

0800163c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_FLASH_Unlock+0x40>)
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00d      	beq.n	800166e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_FLASH_Unlock+0x40>)
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_FLASH_Unlock+0x44>)
 8001656:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_FLASH_Unlock+0x40>)
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_FLASH_Unlock+0x48>)
 800165c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <HAL_FLASH_Unlock+0x40>)
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800166e:	79fb      	ldrb	r3, [r7, #7]
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40022000 	.word	0x40022000
 8001680:	45670123 	.word	0x45670123
 8001684:	cdef89ab 	.word	0xcdef89ab

08001688 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_FLASH_Lock+0x1c>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <HAL_FLASH_Lock+0x1c>)
 8001692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001696:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40022000 	.word	0x40022000

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b08b      	sub	sp, #44	; 0x2c
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ba:	e169      	b.n	8001990 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016bc:	2201      	movs	r2, #1
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f040 8158 	bne.w	800198a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4a9a      	ldr	r2, [pc, #616]	; (8001948 <HAL_GPIO_Init+0x2a0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d05e      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 80016e4:	4a98      	ldr	r2, [pc, #608]	; (8001948 <HAL_GPIO_Init+0x2a0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d875      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 80016ea:	4a98      	ldr	r2, [pc, #608]	; (800194c <HAL_GPIO_Init+0x2a4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d058      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 80016f0:	4a96      	ldr	r2, [pc, #600]	; (800194c <HAL_GPIO_Init+0x2a4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d86f      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 80016f6:	4a96      	ldr	r2, [pc, #600]	; (8001950 <HAL_GPIO_Init+0x2a8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d052      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 80016fc:	4a94      	ldr	r2, [pc, #592]	; (8001950 <HAL_GPIO_Init+0x2a8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d869      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 8001702:	4a94      	ldr	r2, [pc, #592]	; (8001954 <HAL_GPIO_Init+0x2ac>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d04c      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 8001708:	4a92      	ldr	r2, [pc, #584]	; (8001954 <HAL_GPIO_Init+0x2ac>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d863      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 800170e:	4a92      	ldr	r2, [pc, #584]	; (8001958 <HAL_GPIO_Init+0x2b0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d046      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 8001714:	4a90      	ldr	r2, [pc, #576]	; (8001958 <HAL_GPIO_Init+0x2b0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d85d      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 800171a:	2b12      	cmp	r3, #18
 800171c:	d82a      	bhi.n	8001774 <HAL_GPIO_Init+0xcc>
 800171e:	2b12      	cmp	r3, #18
 8001720:	d859      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 8001722:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <HAL_GPIO_Init+0x80>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	080017a3 	.word	0x080017a3
 800172c:	0800177d 	.word	0x0800177d
 8001730:	0800178f 	.word	0x0800178f
 8001734:	080017d1 	.word	0x080017d1
 8001738:	080017d7 	.word	0x080017d7
 800173c:	080017d7 	.word	0x080017d7
 8001740:	080017d7 	.word	0x080017d7
 8001744:	080017d7 	.word	0x080017d7
 8001748:	080017d7 	.word	0x080017d7
 800174c:	080017d7 	.word	0x080017d7
 8001750:	080017d7 	.word	0x080017d7
 8001754:	080017d7 	.word	0x080017d7
 8001758:	080017d7 	.word	0x080017d7
 800175c:	080017d7 	.word	0x080017d7
 8001760:	080017d7 	.word	0x080017d7
 8001764:	080017d7 	.word	0x080017d7
 8001768:	080017d7 	.word	0x080017d7
 800176c:	08001785 	.word	0x08001785
 8001770:	08001799 	.word	0x08001799
 8001774:	4a79      	ldr	r2, [pc, #484]	; (800195c <HAL_GPIO_Init+0x2b4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800177a:	e02c      	b.n	80017d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e029      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	3304      	adds	r3, #4
 800178a:	623b      	str	r3, [r7, #32]
          break;
 800178c:	e024      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	3308      	adds	r3, #8
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e01f      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	330c      	adds	r3, #12
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e01a      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017aa:	2304      	movs	r3, #4
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e013      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b8:	2308      	movs	r3, #8
 80017ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	611a      	str	r2, [r3, #16]
          break;
 80017c2:	e009      	b.n	80017d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c4:	2308      	movs	r3, #8
 80017c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	615a      	str	r2, [r3, #20]
          break;
 80017ce:	e003      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
          break;
 80017d4:	e000      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          break;
 80017d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2bff      	cmp	r3, #255	; 0xff
 80017dc:	d801      	bhi.n	80017e2 <HAL_GPIO_Init+0x13a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	e001      	b.n	80017e6 <HAL_GPIO_Init+0x13e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3304      	adds	r3, #4
 80017e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2bff      	cmp	r3, #255	; 0xff
 80017ec:	d802      	bhi.n	80017f4 <HAL_GPIO_Init+0x14c>
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	e002      	b.n	80017fa <HAL_GPIO_Init+0x152>
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	3b08      	subs	r3, #8
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	210f      	movs	r1, #15
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	401a      	ands	r2, r3
 800180c:	6a39      	ldr	r1, [r7, #32]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	431a      	orrs	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 80b1 	beq.w	800198a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001828:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <HAL_GPIO_Init+0x2b8>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4a4c      	ldr	r2, [pc, #304]	; (8001960 <HAL_GPIO_Init+0x2b8>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6193      	str	r3, [r2, #24]
 8001834:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_GPIO_Init+0x2b8>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001840:	4a48      	ldr	r2, [pc, #288]	; (8001964 <HAL_GPIO_Init+0x2bc>)
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	220f      	movs	r2, #15
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a40      	ldr	r2, [pc, #256]	; (8001968 <HAL_GPIO_Init+0x2c0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d013      	beq.n	8001894 <HAL_GPIO_Init+0x1ec>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a3f      	ldr	r2, [pc, #252]	; (800196c <HAL_GPIO_Init+0x2c4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d00d      	beq.n	8001890 <HAL_GPIO_Init+0x1e8>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a3e      	ldr	r2, [pc, #248]	; (8001970 <HAL_GPIO_Init+0x2c8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d007      	beq.n	800188c <HAL_GPIO_Init+0x1e4>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a3d      	ldr	r2, [pc, #244]	; (8001974 <HAL_GPIO_Init+0x2cc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d101      	bne.n	8001888 <HAL_GPIO_Init+0x1e0>
 8001884:	2303      	movs	r3, #3
 8001886:	e006      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001888:	2304      	movs	r3, #4
 800188a:	e004      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 800188c:	2302      	movs	r3, #2
 800188e:	e002      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001894:	2300      	movs	r3, #0
 8001896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001898:	f002 0203 	and.w	r2, r2, #3
 800189c:	0092      	lsls	r2, r2, #2
 800189e:	4093      	lsls	r3, r2
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018a6:	492f      	ldr	r1, [pc, #188]	; (8001964 <HAL_GPIO_Init+0x2bc>)
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	3302      	adds	r3, #2
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d006      	beq.n	80018ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018c0:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	492c      	ldr	r1, [pc, #176]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	4928      	ldr	r1, [pc, #160]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 80018d8:	4013      	ands	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d006      	beq.n	80018f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4922      	ldr	r1, [pc, #136]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	491e      	ldr	r1, [pc, #120]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 8001900:	4013      	ands	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	4918      	ldr	r1, [pc, #96]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]
 800191c:	e006      	b.n	800192c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	43db      	mvns	r3, r3
 8001926:	4914      	ldr	r1, [pc, #80]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 8001928:	4013      	ands	r3, r2
 800192a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d021      	beq.n	800197c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	490e      	ldr	r1, [pc, #56]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	60cb      	str	r3, [r1, #12]
 8001944:	e021      	b.n	800198a <HAL_GPIO_Init+0x2e2>
 8001946:	bf00      	nop
 8001948:	10320000 	.word	0x10320000
 800194c:	10310000 	.word	0x10310000
 8001950:	10220000 	.word	0x10220000
 8001954:	10210000 	.word	0x10210000
 8001958:	10120000 	.word	0x10120000
 800195c:	10110000 	.word	0x10110000
 8001960:	40021000 	.word	0x40021000
 8001964:	40010000 	.word	0x40010000
 8001968:	40010800 	.word	0x40010800
 800196c:	40010c00 	.word	0x40010c00
 8001970:	40011000 	.word	0x40011000
 8001974:	40011400 	.word	0x40011400
 8001978:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_GPIO_Init+0x304>)
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	43db      	mvns	r3, r3
 8001984:	4909      	ldr	r1, [pc, #36]	; (80019ac <HAL_GPIO_Init+0x304>)
 8001986:	4013      	ands	r3, r2
 8001988:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	3301      	adds	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	fa22 f303 	lsr.w	r3, r2, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	f47f ae8e 	bne.w	80016bc <HAL_GPIO_Init+0x14>
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	372c      	adds	r7, #44	; 0x2c
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	40010400 	.word	0x40010400

080019b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e001      	b.n	80019d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	807b      	strh	r3, [r7, #2]
 80019ea:	4613      	mov	r3, r2
 80019ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ee:	787b      	ldrb	r3, [r7, #1]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f4:	887a      	ldrh	r2, [r7, #2]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019fa:	e003      	b.n	8001a04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	041a      	lsls	r2, r3, #16
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	611a      	str	r2, [r3, #16]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a20:	887a      	ldrh	r2, [r7, #2]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	041a      	lsls	r2, r3, #16
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	887b      	ldrh	r3, [r7, #2]
 8001a2e:	400b      	ands	r3, r1
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	611a      	str	r2, [r3, #16]
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e12b      	b.n	8001caa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d106      	bne.n	8001a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fa86 	bl	8000f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2224      	movs	r2, #36	; 0x24
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0201 	bic.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001aa4:	f001 fb6e 	bl	8003184 <HAL_RCC_GetPCLK1Freq>
 8001aa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4a81      	ldr	r2, [pc, #516]	; (8001cb4 <HAL_I2C_Init+0x274>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d807      	bhi.n	8001ac4 <HAL_I2C_Init+0x84>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4a80      	ldr	r2, [pc, #512]	; (8001cb8 <HAL_I2C_Init+0x278>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	bf94      	ite	ls
 8001abc:	2301      	movls	r3, #1
 8001abe:	2300      	movhi	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	e006      	b.n	8001ad2 <HAL_I2C_Init+0x92>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4a7d      	ldr	r2, [pc, #500]	; (8001cbc <HAL_I2C_Init+0x27c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	bf94      	ite	ls
 8001acc:	2301      	movls	r3, #1
 8001ace:	2300      	movhi	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e0e7      	b.n	8001caa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4a78      	ldr	r2, [pc, #480]	; (8001cc0 <HAL_I2C_Init+0x280>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	0c9b      	lsrs	r3, r3, #18
 8001ae4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4a6a      	ldr	r2, [pc, #424]	; (8001cb4 <HAL_I2C_Init+0x274>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d802      	bhi.n	8001b14 <HAL_I2C_Init+0xd4>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	3301      	adds	r3, #1
 8001b12:	e009      	b.n	8001b28 <HAL_I2C_Init+0xe8>
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	4a69      	ldr	r2, [pc, #420]	; (8001cc4 <HAL_I2C_Init+0x284>)
 8001b20:	fba2 2303 	umull	r2, r3, r2, r3
 8001b24:	099b      	lsrs	r3, r3, #6
 8001b26:	3301      	adds	r3, #1
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	495c      	ldr	r1, [pc, #368]	; (8001cb4 <HAL_I2C_Init+0x274>)
 8001b44:	428b      	cmp	r3, r1
 8001b46:	d819      	bhi.n	8001b7c <HAL_I2C_Init+0x13c>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1e59      	subs	r1, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b56:	1c59      	adds	r1, r3, #1
 8001b58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b5c:	400b      	ands	r3, r1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00a      	beq.n	8001b78 <HAL_I2C_Init+0x138>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1e59      	subs	r1, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b70:	3301      	adds	r3, #1
 8001b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b76:	e051      	b.n	8001c1c <HAL_I2C_Init+0x1dc>
 8001b78:	2304      	movs	r3, #4
 8001b7a:	e04f      	b.n	8001c1c <HAL_I2C_Init+0x1dc>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d111      	bne.n	8001ba8 <HAL_I2C_Init+0x168>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1e58      	subs	r0, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	440b      	add	r3, r1
 8001b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bf0c      	ite	eq
 8001ba0:	2301      	moveq	r3, #1
 8001ba2:	2300      	movne	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	e012      	b.n	8001bce <HAL_I2C_Init+0x18e>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1e58      	subs	r0, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	0099      	lsls	r1, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_I2C_Init+0x196>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e022      	b.n	8001c1c <HAL_I2C_Init+0x1dc>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10e      	bne.n	8001bfc <HAL_I2C_Init+0x1bc>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1e58      	subs	r0, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6859      	ldr	r1, [r3, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	440b      	add	r3, r1
 8001bec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bfa:	e00f      	b.n	8001c1c <HAL_I2C_Init+0x1dc>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1e58      	subs	r0, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6859      	ldr	r1, [r3, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	0099      	lsls	r1, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c12:	3301      	adds	r3, #1
 8001c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	6809      	ldr	r1, [r1, #0]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69da      	ldr	r2, [r3, #28]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6911      	ldr	r1, [r2, #16]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68d2      	ldr	r2, [r2, #12]
 8001c56:	4311      	orrs	r1, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2220      	movs	r2, #32
 8001c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	000186a0 	.word	0x000186a0
 8001cb8:	001e847f 	.word	0x001e847f
 8001cbc:	003d08ff 	.word	0x003d08ff
 8001cc0:	431bde83 	.word	0x431bde83
 8001cc4:	10624dd3 	.word	0x10624dd3

08001cc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	817b      	strh	r3, [r7, #10]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff fac2 	bl	8001264 <HAL_GetTick>
 8001ce0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	f040 80e0 	bne.w	8001eb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2319      	movs	r3, #25
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4970      	ldr	r1, [pc, #448]	; (8001ebc <HAL_I2C_Master_Transmit+0x1f4>)
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 fc92 	bl	8002624 <I2C_WaitOnFlagUntilTimeout>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d06:	2302      	movs	r3, #2
 8001d08:	e0d3      	b.n	8001eb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_I2C_Master_Transmit+0x50>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e0cc      	b.n	8001eb2 <HAL_I2C_Master_Transmit+0x1ea>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d007      	beq.n	8001d3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2221      	movs	r2, #33	; 0x21
 8001d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2210      	movs	r2, #16
 8001d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	893a      	ldrh	r2, [r7, #8]
 8001d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4a50      	ldr	r2, [pc, #320]	; (8001ec0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d80:	8979      	ldrh	r1, [r7, #10]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	6a3a      	ldr	r2, [r7, #32]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 fafc 	bl	8002384 <I2C_MasterRequestWrite>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e08d      	b.n	8001eb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001dac:	e066      	b.n	8001e7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	6a39      	ldr	r1, [r7, #32]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 fd0c 	bl	80027d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00d      	beq.n	8001dda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d107      	bne.n	8001dd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e06b      	b.n	8001eb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d11b      	bne.n	8001e50 <HAL_I2C_Master_Transmit+0x188>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d017      	beq.n	8001e50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	6a39      	ldr	r1, [r7, #32]
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 fcfc 	bl	8002852 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00d      	beq.n	8001e7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d107      	bne.n	8001e78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e01a      	b.n	8001eb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d194      	bne.n	8001dae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	e000      	b.n	8001eb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001eb0:	2302      	movs	r3, #2
  }
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	00100002 	.word	0x00100002
 8001ec0:	ffff0000 	.word	0xffff0000

08001ec4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	; 0x30
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	817b      	strh	r3, [r7, #10]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff f9c2 	bl	8001264 <HAL_GetTick>
 8001ee0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	f040 823f 	bne.w	800236e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2319      	movs	r3, #25
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	497f      	ldr	r1, [pc, #508]	; (80020f8 <HAL_I2C_Master_Receive+0x234>)
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fb92 	bl	8002624 <I2C_WaitOnFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
 8001f08:	e232      	b.n	8002370 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_I2C_Master_Receive+0x54>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e22b      	b.n	8002370 <HAL_I2C_Master_Receive+0x4ac>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d007      	beq.n	8001f3e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2222      	movs	r2, #34	; 0x22
 8001f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2210      	movs	r2, #16
 8001f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	893a      	ldrh	r2, [r7, #8]
 8001f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4a5f      	ldr	r2, [pc, #380]	; (80020fc <HAL_I2C_Master_Receive+0x238>)
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f80:	8979      	ldrh	r1, [r7, #10]
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fa7e 	bl	8002488 <I2C_MasterRequestRead>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e1ec      	b.n	8002370 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d113      	bne.n	8001fc6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e1c0      	b.n	8002348 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d11e      	bne.n	800200c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fdc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fde:	b672      	cpsid	i
}
 8001fe0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	61bb      	str	r3, [r7, #24]
 8001ff6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002006:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002008:	b662      	cpsie	i
}
 800200a:	e035      	b.n	8002078 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002010:	2b02      	cmp	r3, #2
 8002012:	d11e      	bne.n	8002052 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002022:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002024:	b672      	cpsid	i
}
 8002026:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800204e:	b662      	cpsie	i
}
 8002050:	e012      	b.n	8002078 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002060:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002078:	e166      	b.n	8002348 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207e:	2b03      	cmp	r3, #3
 8002080:	f200 811f 	bhi.w	80022c2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002088:	2b01      	cmp	r3, #1
 800208a:	d123      	bne.n	80020d4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 fc1f 	bl	80028d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e167      	b.n	8002370 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020d2:	e139      	b.n	8002348 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d152      	bne.n	8002182 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e2:	2200      	movs	r2, #0
 80020e4:	4906      	ldr	r1, [pc, #24]	; (8002100 <HAL_I2C_Master_Receive+0x23c>)
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fa9c 	bl	8002624 <I2C_WaitOnFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e13c      	b.n	8002370 <HAL_I2C_Master_Receive+0x4ac>
 80020f6:	bf00      	nop
 80020f8:	00100002 	.word	0x00100002
 80020fc:	ffff0000 	.word	0xffff0000
 8002100:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002104:	b672      	cpsid	i
}
 8002106:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002116:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691a      	ldr	r2, [r3, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800214a:	b662      	cpsie	i
}
 800214c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002176:	b29b      	uxth	r3, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002180:	e0e2      	b.n	8002348 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002188:	2200      	movs	r2, #0
 800218a:	497b      	ldr	r1, [pc, #492]	; (8002378 <HAL_I2C_Master_Receive+0x4b4>)
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 fa49 	bl	8002624 <I2C_WaitOnFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0e9      	b.n	8002370 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021ac:	b672      	cpsid	i
}
 80021ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80021e2:	4b66      	ldr	r3, [pc, #408]	; (800237c <HAL_I2C_Master_Receive+0x4b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	08db      	lsrs	r3, r3, #3
 80021e8:	4a65      	ldr	r2, [pc, #404]	; (8002380 <HAL_I2C_Master_Receive+0x4bc>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	0a1a      	lsrs	r2, r3, #8
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00da      	lsls	r2, r3, #3
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	3b01      	subs	r3, #1
 8002200:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d118      	bne.n	800223a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f043 0220 	orr.w	r2, r3, #32
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800222a:	b662      	cpsie	i
}
 800222c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e09a      	b.n	8002370 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b04      	cmp	r3, #4
 8002246:	d1d9      	bne.n	80021fc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002256:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691a      	ldr	r2, [r3, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800228a:	b662      	cpsie	i
}
 800228c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022c0:	e042      	b.n	8002348 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fb04 	bl	80028d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e04c      	b.n	8002370 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b04      	cmp	r3, #4
 8002314:	d118      	bne.n	8002348 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	f47f ae94 	bne.w	800207a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
  }
}
 8002370:	4618      	mov	r0, r3
 8002372:	3728      	adds	r7, #40	; 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	00010004 	.word	0x00010004
 800237c:	20000000 	.word	0x20000000
 8002380:	14f8b589 	.word	0x14f8b589

08002384 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	460b      	mov	r3, r1
 8002392:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d006      	beq.n	80023ae <I2C_MasterRequestWrite+0x2a>
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d003      	beq.n	80023ae <I2C_MasterRequestWrite+0x2a>
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023ac:	d108      	bne.n	80023c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e00b      	b.n	80023d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	2b12      	cmp	r3, #18
 80023c6:	d107      	bne.n	80023d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f91d 	bl	8002624 <I2C_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00d      	beq.n	800240c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fe:	d103      	bne.n	8002408 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e035      	b.n	8002478 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002414:	d108      	bne.n	8002428 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002416:	897b      	ldrh	r3, [r7, #10]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002424:	611a      	str	r2, [r3, #16]
 8002426:	e01b      	b.n	8002460 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002428:	897b      	ldrh	r3, [r7, #10]
 800242a:	11db      	asrs	r3, r3, #7
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f003 0306 	and.w	r3, r3, #6
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f063 030f 	orn	r3, r3, #15
 8002438:	b2da      	uxtb	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	490e      	ldr	r1, [pc, #56]	; (8002480 <I2C_MasterRequestWrite+0xfc>)
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f943 	bl	80026d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e010      	b.n	8002478 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002456:	897b      	ldrh	r3, [r7, #10]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <I2C_MasterRequestWrite+0x100>)
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f933 	bl	80026d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	00010008 	.word	0x00010008
 8002484:	00010002 	.word	0x00010002

08002488 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	460b      	mov	r3, r1
 8002496:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d006      	beq.n	80024c2 <I2C_MasterRequestRead+0x3a>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d003      	beq.n	80024c2 <I2C_MasterRequestRead+0x3a>
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024c0:	d108      	bne.n	80024d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	e00b      	b.n	80024ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	2b11      	cmp	r3, #17
 80024da:	d107      	bne.n	80024ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f893 	bl	8002624 <I2C_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00d      	beq.n	8002520 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002512:	d103      	bne.n	800251c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e079      	b.n	8002614 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002528:	d108      	bne.n	800253c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800252a:	897b      	ldrh	r3, [r7, #10]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	b2da      	uxtb	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	611a      	str	r2, [r3, #16]
 800253a:	e05f      	b.n	80025fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800253c:	897b      	ldrh	r3, [r7, #10]
 800253e:	11db      	asrs	r3, r3, #7
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 0306 	and.w	r3, r3, #6
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f063 030f 	orn	r3, r3, #15
 800254c:	b2da      	uxtb	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4930      	ldr	r1, [pc, #192]	; (800261c <I2C_MasterRequestRead+0x194>)
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f8b9 	bl	80026d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e054      	b.n	8002614 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800256a:	897b      	ldrh	r3, [r7, #10]
 800256c:	b2da      	uxtb	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4929      	ldr	r1, [pc, #164]	; (8002620 <I2C_MasterRequestRead+0x198>)
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f8a9 	bl	80026d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e044      	b.n	8002614 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f831 	bl	8002624 <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00d      	beq.n	80025e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d6:	d103      	bne.n	80025e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e017      	b.n	8002614 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80025e4:	897b      	ldrh	r3, [r7, #10]
 80025e6:	11db      	asrs	r3, r3, #7
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f003 0306 	and.w	r3, r3, #6
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f063 030e 	orn	r3, r3, #14
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4907      	ldr	r1, [pc, #28]	; (8002620 <I2C_MasterRequestRead+0x198>)
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f865 	bl	80026d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	00010008 	.word	0x00010008
 8002620:	00010002 	.word	0x00010002

08002624 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	4613      	mov	r3, r2
 8002632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002634:	e025      	b.n	8002682 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d021      	beq.n	8002682 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263e:	f7fe fe11 	bl	8001264 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d302      	bcc.n	8002654 <I2C_WaitOnFlagUntilTimeout+0x30>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d116      	bne.n	8002682 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f043 0220 	orr.w	r2, r3, #32
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e023      	b.n	80026ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	0c1b      	lsrs	r3, r3, #16
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d10d      	bne.n	80026a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4013      	ands	r3, r2
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	bf0c      	ite	eq
 800269e:	2301      	moveq	r3, #1
 80026a0:	2300      	movne	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	e00c      	b.n	80026c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4013      	ands	r3, r2
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf0c      	ite	eq
 80026ba:	2301      	moveq	r3, #1
 80026bc:	2300      	movne	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d0b6      	beq.n	8002636 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026e0:	e051      	b.n	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f0:	d123      	bne.n	800273a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002700:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800270a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f043 0204 	orr.w	r2, r3, #4
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e046      	b.n	80027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d021      	beq.n	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7fe fd8f 	bl	8001264 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d116      	bne.n	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f043 0220 	orr.w	r2, r3, #32
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e020      	b.n	80027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	0c1b      	lsrs	r3, r3, #16
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d10c      	bne.n	80027aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4013      	ands	r3, r2
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	e00b      	b.n	80027c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	43da      	mvns	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4013      	ands	r3, r2
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf14      	ite	ne
 80027bc:	2301      	movne	r3, #1
 80027be:	2300      	moveq	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d18d      	bne.n	80026e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027dc:	e02d      	b.n	800283a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f8ce 	bl	8002980 <I2C_IsAcknowledgeFailed>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e02d      	b.n	800284a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d021      	beq.n	800283a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f6:	f7fe fd35 	bl	8001264 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d116      	bne.n	800283a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f043 0220 	orr.w	r2, r3, #32
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e007      	b.n	800284a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002844:	2b80      	cmp	r3, #128	; 0x80
 8002846:	d1ca      	bne.n	80027de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800285e:	e02d      	b.n	80028bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f88d 	bl	8002980 <I2C_IsAcknowledgeFailed>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e02d      	b.n	80028cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002876:	d021      	beq.n	80028bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002878:	f7fe fcf4 	bl	8001264 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	d302      	bcc.n	800288e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d116      	bne.n	80028bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e007      	b.n	80028cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d1ca      	bne.n	8002860 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028e0:	e042      	b.n	8002968 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	d119      	bne.n	8002924 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0210 	mvn.w	r2, #16
 80028f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e029      	b.n	8002978 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002924:	f7fe fc9e 	bl	8001264 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	429a      	cmp	r2, r3
 8002932:	d302      	bcc.n	800293a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d116      	bne.n	8002968 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f043 0220 	orr.w	r2, r3, #32
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e007      	b.n	8002978 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002972:	2b40      	cmp	r3, #64	; 0x40
 8002974:	d1b5      	bne.n	80028e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002996:	d11b      	bne.n	80029d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0204 	orr.w	r2, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e272      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8087 	beq.w	8002b0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029fc:	4b92      	ldr	r3, [pc, #584]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d00c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a08:	4b8f      	ldr	r3, [pc, #572]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d112      	bne.n	8002a3a <HAL_RCC_OscConfig+0x5e>
 8002a14:	4b8c      	ldr	r3, [pc, #560]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a20:	d10b      	bne.n	8002a3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a22:	4b89      	ldr	r3, [pc, #548]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d06c      	beq.n	8002b08 <HAL_RCC_OscConfig+0x12c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d168      	bne.n	8002b08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e24c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x76>
 8002a44:	4b80      	ldr	r3, [pc, #512]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a7f      	ldr	r2, [pc, #508]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	e02e      	b.n	8002ab0 <HAL_RCC_OscConfig+0xd4>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x98>
 8002a5a:	4b7b      	ldr	r3, [pc, #492]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a7a      	ldr	r2, [pc, #488]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	4b78      	ldr	r3, [pc, #480]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a77      	ldr	r2, [pc, #476]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e01d      	b.n	8002ab0 <HAL_RCC_OscConfig+0xd4>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0xbc>
 8002a7e:	4b72      	ldr	r3, [pc, #456]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a71      	ldr	r2, [pc, #452]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a6e      	ldr	r2, [pc, #440]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0xd4>
 8002a98:	4b6b      	ldr	r3, [pc, #428]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a6a      	ldr	r2, [pc, #424]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b68      	ldr	r3, [pc, #416]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a67      	ldr	r2, [pc, #412]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fbd4 	bl	8001264 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fbd0 	bl	8001264 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e200      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xe4>
 8002ade:	e014      	b.n	8002b0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fbc0 	bl	8001264 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fbbc 	bl	8001264 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1ec      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afa:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x10c>
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d063      	beq.n	8002bde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b16:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b22:	4b49      	ldr	r3, [pc, #292]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d11c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x18c>
 8002b2e:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d116      	bne.n	8002b68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_RCC_OscConfig+0x176>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e1c0      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4939      	ldr	r1, [pc, #228]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	e03a      	b.n	8002bde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d020      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b70:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <HAL_RCC_OscConfig+0x270>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7fe fb75 	bl	8001264 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7e:	f7fe fb71 	bl	8001264 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e1a1      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4927      	ldr	r1, [pc, #156]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb2:	4b26      	ldr	r3, [pc, #152]	; (8002c4c <HAL_RCC_OscConfig+0x270>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fb54 	bl	8001264 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc0:	f7fe fb50 	bl	8001264 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e180      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d03a      	beq.n	8002c60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d019      	beq.n	8002c26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <HAL_RCC_OscConfig+0x274>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf8:	f7fe fb34 	bl	8001264 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c00:	f7fe fb30 	bl	8001264 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e160      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f000 fad8 	bl	80031d4 <RCC_Delay>
 8002c24:	e01c      	b.n	8002c60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_RCC_OscConfig+0x274>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2c:	f7fe fb1a 	bl	8001264 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c32:	e00f      	b.n	8002c54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c34:	f7fe fb16 	bl	8001264 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d908      	bls.n	8002c54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e146      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	42420000 	.word	0x42420000
 8002c50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	4b92      	ldr	r3, [pc, #584]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e9      	bne.n	8002c34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80a6 	beq.w	8002dba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c72:	4b8b      	ldr	r3, [pc, #556]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10d      	bne.n	8002c9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7e:	4b88      	ldr	r3, [pc, #544]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	4a87      	ldr	r2, [pc, #540]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c88:	61d3      	str	r3, [r2, #28]
 8002c8a:	4b85      	ldr	r3, [pc, #532]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b82      	ldr	r3, [pc, #520]	; (8002ea4 <HAL_RCC_OscConfig+0x4c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d118      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca6:	4b7f      	ldr	r3, [pc, #508]	; (8002ea4 <HAL_RCC_OscConfig+0x4c8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a7e      	ldr	r2, [pc, #504]	; (8002ea4 <HAL_RCC_OscConfig+0x4c8>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fad7 	bl	8001264 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7fe fad3 	bl	8001264 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b64      	cmp	r3, #100	; 0x64
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e103      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	4b75      	ldr	r3, [pc, #468]	; (8002ea4 <HAL_RCC_OscConfig+0x4c8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x312>
 8002ce0:	4b6f      	ldr	r3, [pc, #444]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a6e      	ldr	r2, [pc, #440]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6213      	str	r3, [r2, #32]
 8002cec:	e02d      	b.n	8002d4a <HAL_RCC_OscConfig+0x36e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x334>
 8002cf6:	4b6a      	ldr	r3, [pc, #424]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a69      	ldr	r2, [pc, #420]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	6213      	str	r3, [r2, #32]
 8002d02:	4b67      	ldr	r3, [pc, #412]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	4a66      	ldr	r2, [pc, #408]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f023 0304 	bic.w	r3, r3, #4
 8002d0c:	6213      	str	r3, [r2, #32]
 8002d0e:	e01c      	b.n	8002d4a <HAL_RCC_OscConfig+0x36e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b05      	cmp	r3, #5
 8002d16:	d10c      	bne.n	8002d32 <HAL_RCC_OscConfig+0x356>
 8002d18:	4b61      	ldr	r3, [pc, #388]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4a60      	ldr	r2, [pc, #384]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	f043 0304 	orr.w	r3, r3, #4
 8002d22:	6213      	str	r3, [r2, #32]
 8002d24:	4b5e      	ldr	r3, [pc, #376]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	4a5d      	ldr	r2, [pc, #372]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6213      	str	r3, [r2, #32]
 8002d30:	e00b      	b.n	8002d4a <HAL_RCC_OscConfig+0x36e>
 8002d32:	4b5b      	ldr	r3, [pc, #364]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4a5a      	ldr	r2, [pc, #360]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	6213      	str	r3, [r2, #32]
 8002d3e:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4a57      	ldr	r2, [pc, #348]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	f023 0304 	bic.w	r3, r3, #4
 8002d48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d015      	beq.n	8002d7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d52:	f7fe fa87 	bl	8001264 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fe fa83 	bl	8001264 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e0b1      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d70:	4b4b      	ldr	r3, [pc, #300]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0ee      	beq.n	8002d5a <HAL_RCC_OscConfig+0x37e>
 8002d7c:	e014      	b.n	8002da8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe fa71 	bl	8001264 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fe fa6d 	bl	8001264 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e09b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9c:	4b40      	ldr	r3, [pc, #256]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1ee      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d105      	bne.n	8002dba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dae:	4b3c      	ldr	r3, [pc, #240]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	4a3b      	ldr	r2, [pc, #236]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8087 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc4:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 030c 	and.w	r3, r3, #12
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d061      	beq.n	8002e94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d146      	bne.n	8002e66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd8:	4b33      	ldr	r3, [pc, #204]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fe fa41 	bl	8001264 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fe fa3d 	bl	8001264 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e06d      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df8:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f0      	bne.n	8002de6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0c:	d108      	bne.n	8002e20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	4921      	ldr	r1, [pc, #132]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e20:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a19      	ldr	r1, [r3, #32]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	430b      	orrs	r3, r1
 8002e32:	491b      	ldr	r1, [pc, #108]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fa11 	bl	8001264 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e46:	f7fe fa0d 	bl	8001264 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e03d      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCC_OscConfig+0x46a>
 8002e64:	e035      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fe f9fa 	bl	8001264 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e74:	f7fe f9f6 	bl	8001264 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e026      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x498>
 8002e92:	e01e      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d107      	bne.n	8002eac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e019      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40007000 	.word	0x40007000
 8002ea8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_OscConfig+0x500>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d106      	bne.n	8002ece <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000

08002ee0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0d0      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d910      	bls.n	8002f24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b67      	ldr	r3, [pc, #412]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 0207 	bic.w	r2, r3, #7
 8002f0a:	4965      	ldr	r1, [pc, #404]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b63      	ldr	r3, [pc, #396]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0b8      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d020      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f3c:	4b59      	ldr	r3, [pc, #356]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a58      	ldr	r2, [pc, #352]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f54:	4b53      	ldr	r3, [pc, #332]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4a52      	ldr	r2, [pc, #328]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f60:	4b50      	ldr	r3, [pc, #320]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	494d      	ldr	r1, [pc, #308]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d040      	beq.n	8003000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d115      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e07f      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	4b41      	ldr	r3, [pc, #260]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e073      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fae:	4b3d      	ldr	r3, [pc, #244]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e06b      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fbe:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f023 0203 	bic.w	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4936      	ldr	r1, [pc, #216]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd0:	f7fe f948 	bl	8001264 <HAL_GetTick>
 8002fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7fe f944 	bl	8001264 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e053      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 020c 	and.w	r2, r3, #12
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d1eb      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003000:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d210      	bcs.n	8003030 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 0207 	bic.w	r2, r3, #7
 8003016:	4922      	ldr	r1, [pc, #136]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e032      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800303c:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4916      	ldr	r1, [pc, #88]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800305a:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	490e      	ldr	r1, [pc, #56]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800306e:	f000 f821 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8003072:	4602      	mov	r2, r0
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	490a      	ldr	r1, [pc, #40]	; (80030a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003080:	5ccb      	ldrb	r3, [r1, r3]
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	4a09      	ldr	r2, [pc, #36]	; (80030ac <HAL_RCC_ClockConfig+0x1cc>)
 8003088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_RCC_ClockConfig+0x1d0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe f8a6 	bl	80011e0 <HAL_InitTick>

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40022000 	.word	0x40022000
 80030a4:	40021000 	.word	0x40021000
 80030a8:	080050f4 	.word	0x080050f4
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000004 	.word	0x20000004

080030b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	b490      	push	{r4, r7}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030ba:	4b29      	ldr	r3, [pc, #164]	; (8003160 <HAL_RCC_GetSysClockFreq+0xac>)
 80030bc:	1d3c      	adds	r4, r7, #4
 80030be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030c4:	f240 2301 	movw	r3, #513	; 0x201
 80030c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	2300      	movs	r3, #0
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030de:	4b21      	ldr	r3, [pc, #132]	; (8003164 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d002      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x40>
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0x46>
 80030f2:	e02b      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030f4:	4b1c      	ldr	r3, [pc, #112]	; (8003168 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030f6:	623b      	str	r3, [r7, #32]
      break;
 80030f8:	e02b      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	0c9b      	lsrs	r3, r3, #18
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3328      	adds	r3, #40	; 0x28
 8003104:	443b      	add	r3, r7
 8003106:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800310a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d012      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	0c5b      	lsrs	r3, r3, #17
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	3328      	adds	r3, #40	; 0x28
 8003122:	443b      	add	r3, r7
 8003124:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003128:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_RCC_GetSysClockFreq+0xb4>)
 800312e:	fb03 f202 	mul.w	r2, r3, r2
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
 800313a:	e004      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	4a0b      	ldr	r2, [pc, #44]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003140:	fb02 f303 	mul.w	r3, r2, r3
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	623b      	str	r3, [r7, #32]
      break;
 800314a:	e002      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_RCC_GetSysClockFreq+0xb4>)
 800314e:	623b      	str	r3, [r7, #32]
      break;
 8003150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003152:	6a3b      	ldr	r3, [r7, #32]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3728      	adds	r7, #40	; 0x28
 8003158:	46bd      	mov	sp, r7
 800315a:	bc90      	pop	{r4, r7}
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	080050e4 	.word	0x080050e4
 8003164:	40021000 	.word	0x40021000
 8003168:	007a1200 	.word	0x007a1200
 800316c:	003d0900 	.word	0x003d0900

08003170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003174:	4b02      	ldr	r3, [pc, #8]	; (8003180 <HAL_RCC_GetHCLKFreq+0x10>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	20000000 	.word	0x20000000

08003184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003188:	f7ff fff2 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	4903      	ldr	r1, [pc, #12]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	08005104 	.word	0x08005104

080031ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031b0:	f7ff ffde 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	0adb      	lsrs	r3, r3, #11
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4903      	ldr	r1, [pc, #12]	; (80031d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000
 80031d0:	08005104 	.word	0x08005104

080031d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031dc:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <RCC_Delay+0x34>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <RCC_Delay+0x38>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	0a5b      	lsrs	r3, r3, #9
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031f0:	bf00      	nop
  }
  while (Delay --);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1e5a      	subs	r2, r3, #1
 80031f6:	60fa      	str	r2, [r7, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f9      	bne.n	80031f0 <RCC_Delay+0x1c>
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	20000000 	.word	0x20000000
 800320c:	10624dd3 	.word	0x10624dd3

08003210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e041      	b.n	80032a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd fedc 	bl	8000ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3304      	adds	r3, #4
 800324c:	4619      	mov	r1, r3
 800324e:	4610      	mov	r0, r2
 8003250:	f000 fa9e 	bl	8003790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d001      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e03a      	b.n	800333e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a18      	ldr	r2, [pc, #96]	; (8003348 <HAL_TIM_Base_Start_IT+0x98>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00e      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x58>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f2:	d009      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x58>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a14      	ldr	r2, [pc, #80]	; (800334c <HAL_TIM_Base_Start_IT+0x9c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x58>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a13      	ldr	r2, [pc, #76]	; (8003350 <HAL_TIM_Base_Start_IT+0xa0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d111      	bne.n	800332c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b06      	cmp	r3, #6
 8003318:	d010      	beq.n	800333c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0201 	orr.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332a:	e007      	b.n	800333c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	40012c00 	.word	0x40012c00
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800

08003354 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6a1a      	ldr	r2, [r3, #32]
 8003372:	f241 1311 	movw	r3, #4369	; 0x1111
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10f      	bne.n	800339c <HAL_TIM_Base_Stop_IT+0x48>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6a1a      	ldr	r2, [r3, #32]
 8003382:	f240 4344 	movw	r3, #1092	; 0x444
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d107      	bne.n	800339c <HAL_TIM_Base_Stop_IT+0x48>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d122      	bne.n	800340c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d11b      	bne.n	800340c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0202 	mvn.w	r2, #2
 80033dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f9b1 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f9a4 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f9b3 	bl	800376c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b04      	cmp	r3, #4
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b04      	cmp	r3, #4
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0204 	mvn.w	r2, #4
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2202      	movs	r2, #2
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f987 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f97a 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f989 	bl	800376c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b08      	cmp	r3, #8
 800346c:	d122      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b08      	cmp	r3, #8
 800347a:	d11b      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0208 	mvn.w	r2, #8
 8003484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2204      	movs	r2, #4
 800348a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f95d 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f950 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f95f 	bl	800376c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d122      	bne.n	8003508 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d11b      	bne.n	8003508 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0210 	mvn.w	r2, #16
 80034d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2208      	movs	r2, #8
 80034de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f933 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f926 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f935 	bl	800376c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b01      	cmp	r3, #1
 8003514:	d10e      	bne.n	8003534 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b01      	cmp	r3, #1
 8003522:	d107      	bne.n	8003534 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0201 	mvn.w	r2, #1
 800352c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f001 f92a 	bl	8004788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353e:	2b80      	cmp	r3, #128	; 0x80
 8003540:	d10e      	bne.n	8003560 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354c:	2b80      	cmp	r3, #128	; 0x80
 800354e:	d107      	bne.n	8003560 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fa77 	bl	8003a4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	2b40      	cmp	r3, #64	; 0x40
 800356c:	d10e      	bne.n	800358c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d107      	bne.n	800358c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8f9 	bl	800377e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b20      	cmp	r3, #32
 8003598:	d10e      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d107      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0220 	mvn.w	r2, #32
 80035b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fa42 	bl	8003a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_TIM_ConfigClockSource+0x18>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e0b3      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x180>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003610:	d03e      	beq.n	8003690 <HAL_TIM_ConfigClockSource+0xd0>
 8003612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003616:	f200 8087 	bhi.w	8003728 <HAL_TIM_ConfigClockSource+0x168>
 800361a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361e:	f000 8085 	beq.w	800372c <HAL_TIM_ConfigClockSource+0x16c>
 8003622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003626:	d87f      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
 8003628:	2b70      	cmp	r3, #112	; 0x70
 800362a:	d01a      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0xa2>
 800362c:	2b70      	cmp	r3, #112	; 0x70
 800362e:	d87b      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
 8003630:	2b60      	cmp	r3, #96	; 0x60
 8003632:	d050      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x116>
 8003634:	2b60      	cmp	r3, #96	; 0x60
 8003636:	d877      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
 8003638:	2b50      	cmp	r3, #80	; 0x50
 800363a:	d03c      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0xf6>
 800363c:	2b50      	cmp	r3, #80	; 0x50
 800363e:	d873      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d058      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0x136>
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	d86f      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
 8003648:	2b30      	cmp	r3, #48	; 0x30
 800364a:	d064      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x156>
 800364c:	2b30      	cmp	r3, #48	; 0x30
 800364e:	d86b      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
 8003650:	2b20      	cmp	r3, #32
 8003652:	d060      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x156>
 8003654:	2b20      	cmp	r3, #32
 8003656:	d867      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d05c      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x156>
 800365c:	2b10      	cmp	r3, #16
 800365e:	d05a      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003660:	e062      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6899      	ldr	r1, [r3, #8]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f000 f966 	bl	8003942 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003684:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	609a      	str	r2, [r3, #8]
      break;
 800368e:	e04e      	b.n	800372e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6899      	ldr	r1, [r3, #8]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f000 f94f 	bl	8003942 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036b2:	609a      	str	r2, [r3, #8]
      break;
 80036b4:	e03b      	b.n	800372e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f000 f8c6 	bl	8003854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2150      	movs	r1, #80	; 0x50
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f91d 	bl	800390e <TIM_ITRx_SetConfig>
      break;
 80036d4:	e02b      	b.n	800372e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6859      	ldr	r1, [r3, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f000 f8e4 	bl	80038b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2160      	movs	r1, #96	; 0x60
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f90d 	bl	800390e <TIM_ITRx_SetConfig>
      break;
 80036f4:	e01b      	b.n	800372e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6859      	ldr	r1, [r3, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	461a      	mov	r2, r3
 8003704:	f000 f8a6 	bl	8003854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2140      	movs	r1, #64	; 0x40
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f8fd 	bl	800390e <TIM_ITRx_SetConfig>
      break;
 8003714:	e00b      	b.n	800372e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4619      	mov	r1, r3
 8003720:	4610      	mov	r0, r2
 8003722:	f000 f8f4 	bl	800390e <TIM_ITRx_SetConfig>
        break;
 8003726:	e002      	b.n	800372e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003728:	bf00      	nop
 800372a:	e000      	b.n	800372e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800372c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a29      	ldr	r2, [pc, #164]	; (8003848 <TIM_Base_SetConfig+0xb8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00b      	beq.n	80037c0 <TIM_Base_SetConfig+0x30>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ae:	d007      	beq.n	80037c0 <TIM_Base_SetConfig+0x30>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a26      	ldr	r2, [pc, #152]	; (800384c <TIM_Base_SetConfig+0xbc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_Base_SetConfig+0x30>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a25      	ldr	r2, [pc, #148]	; (8003850 <TIM_Base_SetConfig+0xc0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d108      	bne.n	80037d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a1c      	ldr	r2, [pc, #112]	; (8003848 <TIM_Base_SetConfig+0xb8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00b      	beq.n	80037f2 <TIM_Base_SetConfig+0x62>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e0:	d007      	beq.n	80037f2 <TIM_Base_SetConfig+0x62>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a19      	ldr	r2, [pc, #100]	; (800384c <TIM_Base_SetConfig+0xbc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d003      	beq.n	80037f2 <TIM_Base_SetConfig+0x62>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a18      	ldr	r2, [pc, #96]	; (8003850 <TIM_Base_SetConfig+0xc0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d108      	bne.n	8003804 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a07      	ldr	r2, [pc, #28]	; (8003848 <TIM_Base_SetConfig+0xb8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d103      	bne.n	8003838 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	615a      	str	r2, [r3, #20]
}
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800

08003854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f023 0201 	bic.w	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800387e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f023 030a 	bic.w	r3, r3, #10
 8003890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	621a      	str	r2, [r3, #32]
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f023 0210 	bic.w	r2, r3, #16
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	031b      	lsls	r3, r3, #12
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	621a      	str	r2, [r3, #32]
}
 8003904:	bf00      	nop
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr

0800390e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800390e:	b480      	push	{r7}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	f043 0307 	orr.w	r3, r3, #7
 8003930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	609a      	str	r2, [r3, #8]
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr

08003942 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003942:	b480      	push	{r7}
 8003944:	b087      	sub	sp, #28
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800395c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	021a      	lsls	r2, r3, #8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	431a      	orrs	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4313      	orrs	r3, r2
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	609a      	str	r2, [r3, #8]
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003994:	2302      	movs	r3, #2
 8003996:	e046      	b.n	8003a26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00e      	beq.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d009      	beq.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a10      	ldr	r2, [pc, #64]	; (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d10c      	bne.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800

08003a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e03f      	b.n	8003af2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fd fad8 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fc85 	bl	80043b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b08a      	sub	sp, #40	; 0x28
 8003afe:	af02      	add	r7, sp, #8
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d17c      	bne.n	8003c14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_UART_Transmit+0x2c>
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e075      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_UART_Transmit+0x3e>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e06e      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2221      	movs	r2, #33	; 0x21
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b4e:	f7fd fb89 	bl	8001264 <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	88fa      	ldrh	r2, [r7, #6]
 8003b5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b68:	d108      	bne.n	8003b7c <HAL_UART_Transmit+0x82>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d104      	bne.n	8003b7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	e003      	b.n	8003b84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b8c:	e02a      	b.n	8003be4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2200      	movs	r2, #0
 8003b96:	2180      	movs	r1, #128	; 0x80
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fa38 	bl	800400e <UART_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e036      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10b      	bne.n	8003bc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	e007      	b.n	8003bd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1cf      	bne.n	8003b8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2140      	movs	r1, #64	; 0x40
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fa08 	bl	800400e <UART_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e006      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	e000      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d11d      	bne.n	8003c74 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_UART_Receive_IT+0x26>
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e016      	b.n	8003c76 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Receive_IT+0x38>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e00f      	b.n	8003c76 <HAL_UART_Receive_IT+0x58>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	461a      	mov	r2, r3
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fa19 	bl	80040a2 <UART_Start_Receive_IT>
 8003c70:	4603      	mov	r3, r0
 8003c72:	e000      	b.n	8003c76 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10d      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x52>
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fac9 	bl	8004262 <UART_Receive_IT>
      return;
 8003cd0:	e17b      	b.n	8003fca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80b1 	beq.w	8003e3c <HAL_UART_IRQHandler+0x1bc>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <HAL_UART_IRQHandler+0x70>
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80a6 	beq.w	8003e3c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_UART_IRQHandler+0x90>
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f043 0201 	orr.w	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_UART_IRQHandler+0xb0>
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	f043 0202 	orr.w	r2, r3, #2
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_UART_IRQHandler+0xd0>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f043 0204 	orr.w	r2, r3, #4
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00f      	beq.n	8003d7a <HAL_UART_IRQHandler+0xfa>
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d104      	bne.n	8003d6e <HAL_UART_IRQHandler+0xee>
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f043 0208 	orr.w	r2, r3, #8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 811e 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <HAL_UART_IRQHandler+0x11e>
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fa62 	bl	8004262 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf14      	ite	ne
 8003dac:	2301      	movne	r3, #1
 8003dae:	2300      	moveq	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x146>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d031      	beq.n	8003e2a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f9a4 	bl	8004114 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d023      	beq.n	8003e22 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d013      	beq.n	8003e1a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	4a76      	ldr	r2, [pc, #472]	; (8003fd0 <HAL_UART_IRQHandler+0x350>)
 8003df8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd fba6 	bl	8001550 <HAL_DMA_Abort_IT>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e14:	4610      	mov	r0, r2
 8003e16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	e00e      	b.n	8003e38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f8e3 	bl	8003fe6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	e00a      	b.n	8003e38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8df 	bl	8003fe6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e006      	b.n	8003e38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f8db 	bl	8003fe6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e36:	e0c3      	b.n	8003fc0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	bf00      	nop
    return;
 8003e3a:	e0c1      	b.n	8003fc0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	f040 80a1 	bne.w	8003f88 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 809b 	beq.w	8003f88 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8095 	beq.w	8003f88 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d04e      	beq.n	8003f20 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003e8c:	8a3b      	ldrh	r3, [r7, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 8098 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e98:	8a3a      	ldrh	r2, [r7, #16]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	f080 8092 	bcs.w	8003fc4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8a3a      	ldrh	r2, [r7, #16]
 8003ea4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d02b      	beq.n	8003f08 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ebe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695a      	ldr	r2, [r3, #20]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ede:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0210 	bic.w	r2, r2, #16
 8003efc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd fae9 	bl	80014da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	4619      	mov	r1, r3
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f86d 	bl	8003ff8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f1e:	e051      	b.n	8003fc4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d047      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003f38:	8a7b      	ldrh	r3, [r7, #18]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d044      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f4c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0210 	bic.w	r2, r2, #16
 8003f7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f7c:	8a7b      	ldrh	r3, [r7, #18]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f839 	bl	8003ff8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f86:	e01f      	b.n	8003fc8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x324>
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f8f9 	bl	8004194 <UART_Transmit_IT>
    return;
 8003fa2:	e012      	b.n	8003fca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00d      	beq.n	8003fca <HAL_UART_IRQHandler+0x34a>
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f93a 	bl	8004232 <UART_EndTransmit_IT>
    return;
 8003fbe:	e004      	b.n	8003fca <HAL_UART_IRQHandler+0x34a>
    return;
 8003fc0:	bf00      	nop
 8003fc2:	e002      	b.n	8003fca <HAL_UART_IRQHandler+0x34a>
      return;
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <HAL_UART_IRQHandler+0x34a>
      return;
 8003fc8:	bf00      	nop
  }
}
 8003fca:	3728      	adds	r7, #40	; 0x28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	0800416d 	.word	0x0800416d

08003fd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401e:	e02c      	b.n	800407a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	d028      	beq.n	800407a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0x30>
 800402e:	f7fd f919 	bl	8001264 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	429a      	cmp	r2, r3
 800403c:	d21d      	bcs.n	800407a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800404c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e00f      	b.n	800409a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4013      	ands	r3, r2
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	429a      	cmp	r2, r3
 8004088:	bf0c      	ite	eq
 800408a:	2301      	moveq	r3, #1
 800408c:	2300      	movne	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	461a      	mov	r2, r3
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	429a      	cmp	r2, r3
 8004096:	d0c3      	beq.n	8004020 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	4613      	mov	r3, r2
 80040ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	88fa      	ldrh	r2, [r7, #6]
 80040ba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2222      	movs	r2, #34	; 0x22
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0220 	orr.w	r2, r2, #32
 8004106:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800412a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	2b01      	cmp	r3, #1
 8004142:	d107      	bne.n	8004154 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0210 	bic.w	r2, r2, #16
 8004152:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f7ff ff2d 	bl	8003fe6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b21      	cmp	r3, #33	; 0x21
 80041a6:	d13e      	bne.n	8004226 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b0:	d114      	bne.n	80041dc <UART_Transmit_IT+0x48>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d110      	bne.n	80041dc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	1c9a      	adds	r2, r3, #2
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	621a      	str	r2, [r3, #32]
 80041da:	e008      	b.n	80041ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	1c59      	adds	r1, r3, #1
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6211      	str	r1, [r2, #32]
 80041e6:	781a      	ldrb	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4619      	mov	r1, r3
 80041fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10f      	bne.n	8004222 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004210:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004220:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004226:	2302      	movs	r3, #2
  }
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004248:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff febe 	bl	8003fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b086      	sub	sp, #24
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b22      	cmp	r3, #34	; 0x22
 8004274:	f040 8099 	bne.w	80043aa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004280:	d117      	bne.n	80042b2 <UART_Receive_IT+0x50>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d113      	bne.n	80042b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	b29b      	uxth	r3, r3
 800429c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	1c9a      	adds	r2, r3, #2
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	629a      	str	r2, [r3, #40]	; 0x28
 80042b0:	e026      	b.n	8004300 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c4:	d007      	beq.n	80042d6 <UART_Receive_IT+0x74>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10a      	bne.n	80042e4 <UART_Receive_IT+0x82>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	e008      	b.n	80042f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29b      	uxth	r3, r3
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	4619      	mov	r1, r3
 800430e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004310:	2b00      	cmp	r3, #0
 8004312:	d148      	bne.n	80043a6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0220 	bic.w	r2, r2, #32
 8004322:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004332:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0201 	bic.w	r2, r2, #1
 8004342:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	2b01      	cmp	r3, #1
 8004352:	d123      	bne.n	800439c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0210 	bic.w	r2, r2, #16
 8004368:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b10      	cmp	r3, #16
 8004376:	d10a      	bne.n	800438e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff fe2f 	bl	8003ff8 <HAL_UARTEx_RxEventCallback>
 800439a:	e002      	b.n	80043a2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fdf9 	bl	8004f94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e002      	b.n	80043ac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e000      	b.n	80043ac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80043aa:	2302      	movs	r3, #2
  }
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043ee:	f023 030c 	bic.w	r3, r3, #12
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6812      	ldr	r2, [r2, #0]
 80043f6:	68b9      	ldr	r1, [r7, #8]
 80043f8:	430b      	orrs	r3, r1
 80043fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2c      	ldr	r2, [pc, #176]	; (80044c8 <UART_SetConfig+0x114>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d103      	bne.n	8004424 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800441c:	f7fe fec6 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	e002      	b.n	800442a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004424:	f7fe feae 	bl	8003184 <HAL_RCC_GetPCLK1Freq>
 8004428:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	4a22      	ldr	r2, [pc, #136]	; (80044cc <UART_SetConfig+0x118>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	0119      	lsls	r1, r3, #4
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009a      	lsls	r2, r3, #2
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004460:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <UART_SetConfig+0x118>)
 8004462:	fba3 0302 	umull	r0, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2064      	movs	r0, #100	; 0x64
 800446a:	fb00 f303 	mul.w	r3, r0, r3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	3332      	adds	r3, #50	; 0x32
 8004474:	4a15      	ldr	r2, [pc, #84]	; (80044cc <UART_SetConfig+0x118>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004480:	4419      	add	r1, r3
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009a      	lsls	r2, r3, #2
 800448c:	441a      	add	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	fbb2 f2f3 	udiv	r2, r2, r3
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <UART_SetConfig+0x118>)
 800449a:	fba3 0302 	umull	r0, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	2064      	movs	r0, #100	; 0x64
 80044a2:	fb00 f303 	mul.w	r3, r0, r3
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	3332      	adds	r3, #50	; 0x32
 80044ac:	4a07      	ldr	r2, [pc, #28]	; (80044cc <UART_SetConfig+0x118>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	f003 020f 	and.w	r2, r3, #15
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	440a      	add	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40013800 	.word	0x40013800
 80044cc:	51eb851f 	.word	0x51eb851f

080044d0 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80044d8:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <DWT_Delay_us+0x40>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80044de:	f7fe fe47 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80044e2:	4603      	mov	r3, r0
 80044e4:	4a0b      	ldr	r2, [pc, #44]	; (8004514 <DWT_Delay_us+0x44>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	0c9b      	lsrs	r3, r3, #18
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	fb02 f303 	mul.w	r3, r2, r3
 80044f2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80044f4:	bf00      	nop
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <DWT_Delay_us+0x40>)
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1ad2      	subs	r2, r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d3f8      	bcc.n	80044f6 <DWT_Delay_us+0x26>
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	e0001000 	.word	0xe0001000
 8004514:	431bde83 	.word	0x431bde83

08004518 <Mpu6050_Init>:
float xLastVal, yLastVal, zLastVal;
int16_t xAngle, yAngle, zAngle;
volatile int16_t xS, yS, zS, xA, yA, zA, xVal, yVal, zVal;

void Mpu6050_Init(I2C_HandleTypeDef* mpuInitstructure, TIM_HandleTypeDef* timInitstructure)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
	mpu_handle = mpuInitstructure;
 8004522:	4a1e      	ldr	r2, [pc, #120]	; (800459c <Mpu6050_Init+0x84>)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6013      	str	r3, [r2, #0]
	tim_handle = timInitstructure;
 8004528:	4a1d      	ldr	r2, [pc, #116]	; (80045a0 <Mpu6050_Init+0x88>)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6013      	str	r3, [r2, #0]

	//Mpu6050_Write(PWR_MGMT_1, 0x80);
	DWT_Delay_us(10);
 800452e:	200a      	movs	r0, #10
 8004530:	f7ff ffce 	bl	80044d0 <DWT_Delay_us>
	Mpu6050_Write(PWR_MGMT_1, 0x00);  // internal 8MHz, disabled SLEEP mode, disable CYCLE mode
 8004534:	2100      	movs	r1, #0
 8004536:	206b      	movs	r0, #107	; 0x6b
 8004538:	f000 f834 	bl	80045a4 <Mpu6050_Write>
	DWT_Delay_us(10);
 800453c:	200a      	movs	r0, #10
 800453e:	f7ff ffc7 	bl	80044d0 <DWT_Delay_us>
	Mpu6050_Write(SMPLRT_DIV, 0x07);	 //sample rate: 8khz
 8004542:	2107      	movs	r1, #7
 8004544:	2019      	movs	r0, #25
 8004546:	f000 f82d 	bl	80045a4 <Mpu6050_Write>
	DWT_Delay_us(10);
 800454a:	200a      	movs	r0, #10
 800454c:	f7ff ffc0 	bl	80044d0 <DWT_Delay_us>
	Mpu6050_Write(CONFIG, 0x06);		 //DLPF disable
 8004550:	2106      	movs	r1, #6
 8004552:	201a      	movs	r0, #26
 8004554:	f000 f826 	bl	80045a4 <Mpu6050_Write>
	DWT_Delay_us(10);
 8004558:	200a      	movs	r0, #10
 800455a:	f7ff ffb9 	bl	80044d0 <DWT_Delay_us>
	Mpu6050_Write(GYRO_CONFIG, 0x18);  //full scale range mode 3 +-2000do/s
 800455e:	2118      	movs	r1, #24
 8004560:	201b      	movs	r0, #27
 8004562:	f000 f81f 	bl	80045a4 <Mpu6050_Write>
	DWT_Delay_us(10);
 8004566:	200a      	movs	r0, #10
 8004568:	f7ff ffb2 	bl	80044d0 <DWT_Delay_us>
	Mpu6050_Write(ACCEL_CONFIG, 0x00); //full scale range mode 1 +-4g
 800456c:	2100      	movs	r1, #0
 800456e:	201c      	movs	r0, #28
 8004570:	f000 f818 	bl	80045a4 <Mpu6050_Write>
	DWT_Delay_us(10);
 8004574:	200a      	movs	r0, #10
 8004576:	f7ff ffab 	bl	80044d0 <DWT_Delay_us>
	Mpu6050_Write(INT_ENABLE, 0x01);
 800457a:	2101      	movs	r1, #1
 800457c:	2038      	movs	r0, #56	; 0x38
 800457e:	f000 f811 	bl	80045a4 <Mpu6050_Write>
	DWT_Delay_us(10);
 8004582:	200a      	movs	r0, #10
 8004584:	f7ff ffa4 	bl	80044d0 <DWT_Delay_us>
	//Mpu6050_Write(PWR_MGMT_1, 0x01);
	HAL_TIM_Base_Start_IT(tim_handle);
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <Mpu6050_Init+0x88>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe fe8f 	bl	80032b0 <HAL_TIM_Base_Start_IT>
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	2000010c 	.word	0x2000010c
 80045a0:	20000110 	.word	0x20000110

080045a4 <Mpu6050_Write>:
void MPU6050_Reset(void){
	__NVIC_SystemReset();
}

void Mpu6050_Write(uint8_t adress,uint8_t data)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	4603      	mov	r3, r0
 80045ac:	460a      	mov	r2, r1
 80045ae:	71fb      	strb	r3, [r7, #7]
 80045b0:	4613      	mov	r3, r2
 80045b2:	71bb      	strb	r3, [r7, #6]
	unsigned char Buff[2];
	Buff[0] = adress;
 80045b4:	79fb      	ldrb	r3, [r7, #7]
 80045b6:	733b      	strb	r3, [r7, #12]
	HAL_Delay(10);
 80045b8:	200a      	movs	r0, #10
 80045ba:	f7fc fe5d 	bl	8001278 <HAL_Delay>
	Buff[1] = data;
 80045be:	79bb      	ldrb	r3, [r7, #6]
 80045c0:	737b      	strb	r3, [r7, #13]
	HAL_Delay(10);
 80045c2:	200a      	movs	r0, #10
 80045c4:	f7fc fe58 	bl	8001278 <HAL_Delay>
	while(HAL_I2C_Master_Transmit(mpu_handle, 0xD0, &Buff[0], 2, 2));
 80045c8:	bf00      	nop
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <Mpu6050_Write+0x4c>)
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	f107 020c 	add.w	r2, r7, #12
 80045d2:	2302      	movs	r3, #2
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	2302      	movs	r3, #2
 80045d8:	21d0      	movs	r1, #208	; 0xd0
 80045da:	f7fd fb75 	bl	8001cc8 <HAL_I2C_Master_Transmit>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f2      	bne.n	80045ca <Mpu6050_Write+0x26>
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	2000010c 	.word	0x2000010c

080045f4 <Mpu6050_Read>:
unsigned char Mpu6050_Read(uint8_t adress)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	4603      	mov	r3, r0
 80045fc:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	while(HAL_I2C_Master_Transmit(mpu_handle, 0xD0, &adress, 1, 100));
 80045fe:	bf00      	nop
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <Mpu6050_Read+0x4c>)
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	1dfa      	adds	r2, r7, #7
 8004606:	2364      	movs	r3, #100	; 0x64
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	2301      	movs	r3, #1
 800460c:	21d0      	movs	r1, #208	; 0xd0
 800460e:	f7fd fb5b 	bl	8001cc8 <HAL_I2C_Master_Transmit>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f3      	bne.n	8004600 <Mpu6050_Read+0xc>
	while(HAL_I2C_Master_Receive(mpu_handle, 0xD1, &data, 1, 500));
 8004618:	bf00      	nop
 800461a:	4b09      	ldr	r3, [pc, #36]	; (8004640 <Mpu6050_Read+0x4c>)
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	f107 020f 	add.w	r2, r7, #15
 8004622:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	2301      	movs	r3, #1
 800462a:	21d1      	movs	r1, #209	; 0xd1
 800462c:	f7fd fc4a 	bl	8001ec4 <HAL_I2C_Master_Receive>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f1      	bne.n	800461a <Mpu6050_Read+0x26>
	return data;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	2000010c 	.word	0x2000010c

08004644 <getAntiDriffCoefficient>:

float getAntiDriffCoefficient(uint8_t numSample, axis_e axis){
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	460a      	mov	r2, r1
 800464e:	71fb      	strb	r3, [r7, #7]
 8004650:	4613      	mov	r3, r2
 8004652:	71bb      	strb	r3, [r7, #6]
	int byteL, byteH;

	int16_t sumAntiDriffVal = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	83fb      	strh	r3, [r7, #30]
	float avgDriff = 0;
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
	HAL_TIM_Base_Stop_IT(tim_handle);
 800465e:	4b48      	ldr	r3, [pc, #288]	; (8004780 <getAntiDriffCoefficient+0x13c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fe76 	bl	8003354 <HAL_TIM_Base_Stop_IT>

	switch(axis){
 8004668:	79bb      	ldrb	r3, [r7, #6]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d04e      	beq.n	800470c <getAntiDriffCoefficient+0xc8>
 800466e:	2b02      	cmp	r3, #2
 8004670:	dc70      	bgt.n	8004754 <getAntiDriffCoefficient+0x110>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <getAntiDriffCoefficient+0x38>
 8004676:	2b01      	cmp	r3, #1
 8004678:	d024      	beq.n	80046c4 <getAntiDriffCoefficient+0x80>
				sumAntiDriffVal +=  ((byteH << 8) | byteL);
				HAL_Delay(1);
			}
			break;
		default:
			break;
 800467a:	e06b      	b.n	8004754 <getAntiDriffCoefficient+0x110>
			for(uint8_t i_cnt = 0; i_cnt < numSample; i_cnt++){
 800467c:	2300      	movs	r3, #0
 800467e:	777b      	strb	r3, [r7, #29]
 8004680:	e01b      	b.n	80046ba <getAntiDriffCoefficient+0x76>
				byteH = Mpu6050_Read(GYRO_XOUT_H);
 8004682:	2043      	movs	r0, #67	; 0x43
 8004684:	f7ff ffb6 	bl	80045f4 <Mpu6050_Read>
 8004688:	4603      	mov	r3, r0
 800468a:	613b      	str	r3, [r7, #16]
				byteL = Mpu6050_Read(GYRO_XOUT_L);
 800468c:	2044      	movs	r0, #68	; 0x44
 800468e:	f7ff ffb1 	bl	80045f4 <Mpu6050_Read>
 8004692:	4603      	mov	r3, r0
 8004694:	60fb      	str	r3, [r7, #12]
				sumAntiDriffVal +=  ((byteH << 8) | byteL);
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	b21a      	sxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	b21b      	sxth	r3, r3
 80046a0:	4313      	orrs	r3, r2
 80046a2:	b21b      	sxth	r3, r3
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	8bfb      	ldrh	r3, [r7, #30]
 80046a8:	4413      	add	r3, r2
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	83fb      	strh	r3, [r7, #30]
				HAL_Delay(1);
 80046ae:	2001      	movs	r0, #1
 80046b0:	f7fc fde2 	bl	8001278 <HAL_Delay>
			for(uint8_t i_cnt = 0; i_cnt < numSample; i_cnt++){
 80046b4:	7f7b      	ldrb	r3, [r7, #29]
 80046b6:	3301      	adds	r3, #1
 80046b8:	777b      	strb	r3, [r7, #29]
 80046ba:	7f7a      	ldrb	r2, [r7, #29]
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d3df      	bcc.n	8004682 <getAntiDriffCoefficient+0x3e>
			break;
 80046c2:	e048      	b.n	8004756 <getAntiDriffCoefficient+0x112>
			for(uint8_t i_cnt = 0; i_cnt < numSample; i_cnt++){
 80046c4:	2300      	movs	r3, #0
 80046c6:	773b      	strb	r3, [r7, #28]
 80046c8:	e01b      	b.n	8004702 <getAntiDriffCoefficient+0xbe>
				byteH = Mpu6050_Read(GYRO_YOUT_H);
 80046ca:	2045      	movs	r0, #69	; 0x45
 80046cc:	f7ff ff92 	bl	80045f4 <Mpu6050_Read>
 80046d0:	4603      	mov	r3, r0
 80046d2:	613b      	str	r3, [r7, #16]
				byteL = Mpu6050_Read(GYRO_YOUT_L);
 80046d4:	2046      	movs	r0, #70	; 0x46
 80046d6:	f7ff ff8d 	bl	80045f4 <Mpu6050_Read>
 80046da:	4603      	mov	r3, r0
 80046dc:	60fb      	str	r3, [r7, #12]
				sumAntiDriffVal +=  ((byteH << 8) | byteL);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	b21a      	sxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	b21b      	sxth	r3, r3
 80046e8:	4313      	orrs	r3, r2
 80046ea:	b21b      	sxth	r3, r3
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	8bfb      	ldrh	r3, [r7, #30]
 80046f0:	4413      	add	r3, r2
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	83fb      	strh	r3, [r7, #30]
				HAL_Delay(1);
 80046f6:	2001      	movs	r0, #1
 80046f8:	f7fc fdbe 	bl	8001278 <HAL_Delay>
			for(uint8_t i_cnt = 0; i_cnt < numSample; i_cnt++){
 80046fc:	7f3b      	ldrb	r3, [r7, #28]
 80046fe:	3301      	adds	r3, #1
 8004700:	773b      	strb	r3, [r7, #28]
 8004702:	7f3a      	ldrb	r2, [r7, #28]
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	429a      	cmp	r2, r3
 8004708:	d3df      	bcc.n	80046ca <getAntiDriffCoefficient+0x86>
			break;
 800470a:	e024      	b.n	8004756 <getAntiDriffCoefficient+0x112>
			for(uint8_t i_cnt = 0; i_cnt < numSample; i_cnt++){
 800470c:	2300      	movs	r3, #0
 800470e:	76fb      	strb	r3, [r7, #27]
 8004710:	e01b      	b.n	800474a <getAntiDriffCoefficient+0x106>
				byteH = Mpu6050_Read(GYRO_ZOUT_H);
 8004712:	2047      	movs	r0, #71	; 0x47
 8004714:	f7ff ff6e 	bl	80045f4 <Mpu6050_Read>
 8004718:	4603      	mov	r3, r0
 800471a:	613b      	str	r3, [r7, #16]
				byteL = Mpu6050_Read(GYRO_ZOUT_L);
 800471c:	2048      	movs	r0, #72	; 0x48
 800471e:	f7ff ff69 	bl	80045f4 <Mpu6050_Read>
 8004722:	4603      	mov	r3, r0
 8004724:	60fb      	str	r3, [r7, #12]
				sumAntiDriffVal +=  ((byteH << 8) | byteL);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	b21a      	sxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	b21b      	sxth	r3, r3
 8004730:	4313      	orrs	r3, r2
 8004732:	b21b      	sxth	r3, r3
 8004734:	b29a      	uxth	r2, r3
 8004736:	8bfb      	ldrh	r3, [r7, #30]
 8004738:	4413      	add	r3, r2
 800473a:	b29b      	uxth	r3, r3
 800473c:	83fb      	strh	r3, [r7, #30]
				HAL_Delay(1);
 800473e:	2001      	movs	r0, #1
 8004740:	f7fc fd9a 	bl	8001278 <HAL_Delay>
			for(uint8_t i_cnt = 0; i_cnt < numSample; i_cnt++){
 8004744:	7efb      	ldrb	r3, [r7, #27]
 8004746:	3301      	adds	r3, #1
 8004748:	76fb      	strb	r3, [r7, #27]
 800474a:	7efa      	ldrb	r2, [r7, #27]
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	429a      	cmp	r2, r3
 8004750:	d3df      	bcc.n	8004712 <getAntiDriffCoefficient+0xce>
			break;
 8004752:	e000      	b.n	8004756 <getAntiDriffCoefficient+0x112>
			break;
 8004754:	bf00      	nop
	}

	avgDriff = sumAntiDriffVal / numSample;
 8004756:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004760:	4618      	mov	r0, r3
 8004762:	f7fc f9f5 	bl	8000b50 <__aeabi_i2f>
 8004766:	4603      	mov	r3, r0
 8004768:	617b      	str	r3, [r7, #20]
	HAL_TIM_Base_Start_IT(tim_handle);
 800476a:	4b05      	ldr	r3, [pc, #20]	; (8004780 <getAntiDriffCoefficient+0x13c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe fd9e 	bl	80032b0 <HAL_TIM_Base_Start_IT>
	return avgDriff;
 8004774:	697b      	ldr	r3, [r7, #20]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3720      	adds	r7, #32
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000110 	.word	0x20000110
 8004784:	00000000 	.word	0x00000000

08004788 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b5b0      	push	{r4, r5, r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

	if((htim->Instance)==tim_handle->Instance)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b98      	ldr	r3, [pc, #608]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	f040 811d 	bne.w	80049da <HAL_TIM_PeriodElapsedCallback+0x252>
	{
		int zH,zL;
		int xH,xL;
		int yH,yL;

		xH = Mpu6050_Read(GYRO_XOUT_H);
 80047a0:	2043      	movs	r0, #67	; 0x43
 80047a2:	f7ff ff27 	bl	80045f4 <Mpu6050_Read>
 80047a6:	4603      	mov	r3, r0
 80047a8:	61fb      	str	r3, [r7, #28]
		xL = Mpu6050_Read(GYRO_XOUT_L);
 80047aa:	2044      	movs	r0, #68	; 0x44
 80047ac:	f7ff ff22 	bl	80045f4 <Mpu6050_Read>
 80047b0:	4603      	mov	r3, r0
 80047b2:	61bb      	str	r3, [r7, #24]
		xVal = (xH << 8) | xL;
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	b21a      	sxth	r2, r3
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	b21b      	sxth	r3, r3
 80047be:	4313      	orrs	r3, r2
 80047c0:	b21a      	sxth	r2, r3
 80047c2:	4b8e      	ldr	r3, [pc, #568]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x274>)
 80047c4:	801a      	strh	r2, [r3, #0]
		xA = ( xVal + driffVal.x_Axis) / 1.64;			//he so chong troi
 80047c6:	4b8d      	ldr	r3, [pc, #564]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x274>)
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b21b      	sxth	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b8c      	ldr	r3, [pc, #560]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4413      	add	r3, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fb fe0d 	bl	80003f4 <__aeabi_i2d>
 80047da:	a383      	add	r3, pc, #524	; (adr r3, 80049e8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	f7fb ff9c 	bl	800071c <__aeabi_ddiv>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	f7fc f87e 	bl	80008ec <__aeabi_d2iz>
 80047f0:	4603      	mov	r3, r0
 80047f2:	b21a      	sxth	r2, r3
 80047f4:	4b83      	ldr	r3, [pc, #524]	; (8004a04 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80047f6:	801a      	strh	r2, [r3, #0]
		xLastVal = xLastVal + (xA * 0.05);
 80047f8:	4b83      	ldr	r3, [pc, #524]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fb fe0b 	bl	8000418 <__aeabi_f2d>
 8004802:	4604      	mov	r4, r0
 8004804:	460d      	mov	r5, r1
 8004806:	4b7f      	ldr	r3, [pc, #508]	; (8004a04 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b21b      	sxth	r3, r3
 800480c:	4618      	mov	r0, r3
 800480e:	f7fb fdf1 	bl	80003f4 <__aeabi_i2d>
 8004812:	a377      	add	r3, pc, #476	; (adr r3, 80049f0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	f7fb fe56 	bl	80004c8 <__aeabi_dmul>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4620      	mov	r0, r4
 8004822:	4629      	mov	r1, r5
 8004824:	f7fb fc9a 	bl	800015c <__adddf3>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	f7fc f884 	bl	800093c <__aeabi_d2f>
 8004834:	4603      	mov	r3, r0
 8004836:	4a74      	ldr	r2, [pc, #464]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004838:	6013      	str	r3, [r2, #0]
		xS = xLastVal;
 800483a:	4b73      	ldr	r3, [pc, #460]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fc f9da 	bl	8000bf8 <__aeabi_f2iz>
 8004844:	4603      	mov	r3, r0
 8004846:	b21a      	sxth	r2, r3
 8004848:	4b70      	ldr	r3, [pc, #448]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800484a:	801a      	strh	r2, [r3, #0]
//		k = -s;
//		h = k / 256;
//		l = k % 256;
		xAngle = -xS;
 800484c:	4b6f      	ldr	r3, [pc, #444]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b21b      	sxth	r3, r3
 8004852:	b29b      	uxth	r3, r3
 8004854:	425b      	negs	r3, r3
 8004856:	b29b      	uxth	r3, r3
 8004858:	b21a      	sxth	r2, r3
 800485a:	4b6d      	ldr	r3, [pc, #436]	; (8004a10 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800485c:	801a      	strh	r2, [r3, #0]



		yH = Mpu6050_Read(GYRO_YOUT_H);
 800485e:	2045      	movs	r0, #69	; 0x45
 8004860:	f7ff fec8 	bl	80045f4 <Mpu6050_Read>
 8004864:	4603      	mov	r3, r0
 8004866:	617b      	str	r3, [r7, #20]
		yL = Mpu6050_Read(GYRO_YOUT_L);
 8004868:	2046      	movs	r0, #70	; 0x46
 800486a:	f7ff fec3 	bl	80045f4 <Mpu6050_Read>
 800486e:	4603      	mov	r3, r0
 8004870:	613b      	str	r3, [r7, #16]
		yVal = (yH << 8) | yL;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	b21a      	sxth	r2, r3
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	b21b      	sxth	r3, r3
 800487c:	4313      	orrs	r3, r2
 800487e:	b21a      	sxth	r2, r3
 8004880:	4b64      	ldr	r3, [pc, #400]	; (8004a14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004882:	801a      	strh	r2, [r3, #0]
		yA = ( yVal + driffVal.y_Axis) / 1.64;			//he so chong troi
 8004884:	4b63      	ldr	r3, [pc, #396]	; (8004a14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	b21b      	sxth	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	4b5c      	ldr	r3, [pc, #368]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4413      	add	r3, r2
 8004892:	4618      	mov	r0, r3
 8004894:	f7fb fdae 	bl	80003f4 <__aeabi_i2d>
 8004898:	a353      	add	r3, pc, #332	; (adr r3, 80049e8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	f7fb ff3d 	bl	800071c <__aeabi_ddiv>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4610      	mov	r0, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	f7fc f81f 	bl	80008ec <__aeabi_d2iz>
 80048ae:	4603      	mov	r3, r0
 80048b0:	b21a      	sxth	r2, r3
 80048b2:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80048b4:	801a      	strh	r2, [r3, #0]
		yLastVal = yLastVal + (yA * 0.05);
 80048b6:	4b59      	ldr	r3, [pc, #356]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fb fdac 	bl	8000418 <__aeabi_f2d>
 80048c0:	4604      	mov	r4, r0
 80048c2:	460d      	mov	r5, r1
 80048c4:	4b54      	ldr	r3, [pc, #336]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b21b      	sxth	r3, r3
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fb fd92 	bl	80003f4 <__aeabi_i2d>
 80048d0:	a347      	add	r3, pc, #284	; (adr r3, 80049f0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	f7fb fdf7 	bl	80004c8 <__aeabi_dmul>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4620      	mov	r0, r4
 80048e0:	4629      	mov	r1, r5
 80048e2:	f7fb fc3b 	bl	800015c <__adddf3>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4610      	mov	r0, r2
 80048ec:	4619      	mov	r1, r3
 80048ee:	f7fc f825 	bl	800093c <__aeabi_d2f>
 80048f2:	4603      	mov	r3, r0
 80048f4:	4a49      	ldr	r2, [pc, #292]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80048f6:	6013      	str	r3, [r2, #0]
		yS = yLastVal;
 80048f8:	4b48      	ldr	r3, [pc, #288]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fc f97b 	bl	8000bf8 <__aeabi_f2iz>
 8004902:	4603      	mov	r3, r0
 8004904:	b21a      	sxth	r2, r3
 8004906:	4b46      	ldr	r3, [pc, #280]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004908:	801a      	strh	r2, [r3, #0]
		yAngle = -yS;
 800490a:	4b45      	ldr	r3, [pc, #276]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	b21b      	sxth	r3, r3
 8004910:	b29b      	uxth	r3, r3
 8004912:	425b      	negs	r3, r3
 8004914:	b29b      	uxth	r3, r3
 8004916:	b21a      	sxth	r2, r3
 8004918:	4b42      	ldr	r3, [pc, #264]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800491a:	801a      	strh	r2, [r3, #0]


		zH = Mpu6050_Read(GYRO_ZOUT_H);
 800491c:	2047      	movs	r0, #71	; 0x47
 800491e:	f7ff fe69 	bl	80045f4 <Mpu6050_Read>
 8004922:	4603      	mov	r3, r0
 8004924:	60fb      	str	r3, [r7, #12]
		zL = Mpu6050_Read(GYRO_ZOUT_L);
 8004926:	2048      	movs	r0, #72	; 0x48
 8004928:	f7ff fe64 	bl	80045f4 <Mpu6050_Read>
 800492c:	4603      	mov	r3, r0
 800492e:	60bb      	str	r3, [r7, #8]
		zVal = (zH << 8) | zL;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	b21a      	sxth	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	b21b      	sxth	r3, r3
 800493a:	4313      	orrs	r3, r2
 800493c:	b21a      	sxth	r2, r3
 800493e:	4b3a      	ldr	r3, [pc, #232]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004940:	801a      	strh	r2, [r3, #0]
		zA = ( zVal + driffVal.z_Axis) / 1.64;			//he so chong troi
 8004942:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b21b      	sxth	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	4b2d      	ldr	r3, [pc, #180]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	4413      	add	r3, r2
 8004950:	4618      	mov	r0, r3
 8004952:	f7fb fd4f 	bl	80003f4 <__aeabi_i2d>
 8004956:	a324      	add	r3, pc, #144	; (adr r3, 80049e8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f7fb fede 	bl	800071c <__aeabi_ddiv>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	f7fb ffc0 	bl	80008ec <__aeabi_d2iz>
 800496c:	4603      	mov	r3, r0
 800496e:	b21a      	sxth	r2, r3
 8004970:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004972:	801a      	strh	r2, [r3, #0]
		zLastVal = zLastVal + (zA * 0.05);
 8004974:	4b2e      	ldr	r3, [pc, #184]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f7fb fd4d 	bl	8000418 <__aeabi_f2d>
 800497e:	4604      	mov	r4, r0
 8004980:	460d      	mov	r5, r1
 8004982:	4b2a      	ldr	r3, [pc, #168]	; (8004a2c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b21b      	sxth	r3, r3
 8004988:	4618      	mov	r0, r3
 800498a:	f7fb fd33 	bl	80003f4 <__aeabi_i2d>
 800498e:	a318      	add	r3, pc, #96	; (adr r3, 80049f0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f7fb fd98 	bl	80004c8 <__aeabi_dmul>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4620      	mov	r0, r4
 800499e:	4629      	mov	r1, r5
 80049a0:	f7fb fbdc 	bl	800015c <__adddf3>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4610      	mov	r0, r2
 80049aa:	4619      	mov	r1, r3
 80049ac:	f7fb ffc6 	bl	800093c <__aeabi_d2f>
 80049b0:	4603      	mov	r3, r0
 80049b2:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80049b4:	6013      	str	r3, [r2, #0]
		zS = zLastVal;
 80049b6:	4b1e      	ldr	r3, [pc, #120]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fc f91c 	bl	8000bf8 <__aeabi_f2iz>
 80049c0:	4603      	mov	r3, r0
 80049c2:	b21a      	sxth	r2, r3
 80049c4:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80049c6:	801a      	strh	r2, [r3, #0]
		zAngle = -zS;
 80049c8:	4b1a      	ldr	r3, [pc, #104]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	b21b      	sxth	r3, r3
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	425b      	negs	r3, r3
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	b21a      	sxth	r2, r3
 80049d6:	4b18      	ldr	r3, [pc, #96]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80049d8:	801a      	strh	r2, [r3, #0]
	}
}
 80049da:	bf00      	nop
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bdb0      	pop	{r4, r5, r7, pc}
 80049e2:	bf00      	nop
 80049e4:	f3af 8000 	nop.w
 80049e8:	a3d70a3d 	.word	0xa3d70a3d
 80049ec:	3ffa3d70 	.word	0x3ffa3d70
 80049f0:	9999999a 	.word	0x9999999a
 80049f4:	3fa99999 	.word	0x3fa99999
 80049f8:	20000110 	.word	0x20000110
 80049fc:	20000132 	.word	0x20000132
 8004a00:	20000144 	.word	0x20000144
 8004a04:	2000012c 	.word	0x2000012c
 8004a08:	20000114 	.word	0x20000114
 8004a0c:	20000126 	.word	0x20000126
 8004a10:	20000120 	.word	0x20000120
 8004a14:	20000134 	.word	0x20000134
 8004a18:	2000012e 	.word	0x2000012e
 8004a1c:	20000118 	.word	0x20000118
 8004a20:	20000128 	.word	0x20000128
 8004a24:	20000122 	.word	0x20000122
 8004a28:	20000136 	.word	0x20000136
 8004a2c:	20000130 	.word	0x20000130
 8004a30:	2000011c 	.word	0x2000011c
 8004a34:	2000012a 	.word	0x2000012a
 8004a38:	20000124 	.word	0x20000124

08004a3c <buttonHoldScan>:
#define TIME_HOLD_3S		30


button_hold_event_e g_buttonEvent;

void buttonHoldScan(void){
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
	static uint32_t btnTicks = 0;
	static uint8_t btnCount = 0;
	if(HAL_GetTick() - btnTicks > TIME_SCAN_BUTTON){
 8004a40:	f7fc fc10 	bl	8001264 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <buttonHoldScan+0x74>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b64      	cmp	r3, #100	; 0x64
 8004a4e:	d92d      	bls.n	8004aac <buttonHoldScan+0x70>
		if(!HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin)){
 8004a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a54:	4817      	ldr	r0, [pc, #92]	; (8004ab4 <buttonHoldScan+0x78>)
 8004a56:	f7fc ffab 	bl	80019b0 <HAL_GPIO_ReadPin>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d106      	bne.n	8004a6e <buttonHoldScan+0x32>
			btnCount++;
 8004a60:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <buttonHoldScan+0x7c>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	3301      	adds	r3, #1
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <buttonHoldScan+0x7c>)
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	e002      	b.n	8004a74 <buttonHoldScan+0x38>
		}
		else{
			btnCount = 0;
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <buttonHoldScan+0x7c>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]
		}

		if(btnCount > TIME_HOLD_3S){
 8004a74:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <buttonHoldScan+0x7c>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b1e      	cmp	r3, #30
 8004a7a:	d903      	bls.n	8004a84 <buttonHoldScan+0x48>
			g_buttonEvent = HOLD_3S;
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <buttonHoldScan+0x80>)
 8004a7e:	2203      	movs	r2, #3
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	e00e      	b.n	8004aa2 <buttonHoldScan+0x66>
		}
		else if(btnCount > 2 && btnCount < 29){
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <buttonHoldScan+0x7c>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d907      	bls.n	8004a9c <buttonHoldScan+0x60>
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <buttonHoldScan+0x7c>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b1c      	cmp	r3, #28
 8004a92:	d803      	bhi.n	8004a9c <buttonHoldScan+0x60>
			g_buttonEvent = HOLD_1S;
 8004a94:	4b09      	ldr	r3, [pc, #36]	; (8004abc <buttonHoldScan+0x80>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	e002      	b.n	8004aa2 <buttonHoldScan+0x66>
		}
		else{
			g_buttonEvent = IDLE;
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <buttonHoldScan+0x80>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
		}
		btnTicks = HAL_GetTick();
 8004aa2:	f7fc fbdf 	bl	8001264 <HAL_GetTick>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	4a01      	ldr	r2, [pc, #4]	; (8004ab0 <buttonHoldScan+0x74>)
 8004aaa:	6013      	str	r3, [r2, #0]
	}
}
 8004aac:	bf00      	nop
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	2000013c 	.word	0x2000013c
 8004ab4:	40011000 	.word	0x40011000
 8004ab8:	20000140 	.word	0x20000140
 8004abc:	20000138 	.word	0x20000138

08004ac0 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8004ac4:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <DWT_Delay_Init+0x58>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <DWT_Delay_Init+0x58>)
 8004aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ace:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8004ad0:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <DWT_Delay_Init+0x58>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4a10      	ldr	r2, [pc, #64]	; (8004b18 <DWT_Delay_Init+0x58>)
 8004ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ada:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <DWT_Delay_Init+0x5c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a0e      	ldr	r2, [pc, #56]	; (8004b1c <DWT_Delay_Init+0x5c>)
 8004ae2:	f023 0301 	bic.w	r3, r3, #1
 8004ae6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <DWT_Delay_Init+0x5c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a0b      	ldr	r2, [pc, #44]	; (8004b1c <DWT_Delay_Init+0x5c>)
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <DWT_Delay_Init+0x5c>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8004afa:	bf00      	nop
     __ASM volatile ("NOP");
 8004afc:	bf00      	nop
  __ASM volatile ("NOP");
 8004afe:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <DWT_Delay_Init+0x5c>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e000      	b.n	8004b0e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8004b0c:	2301      	movs	r3, #1
  }
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	e000edf0 	.word	0xe000edf0
 8004b1c:	e0001000 	.word	0xe0001000

08004b20 <Flash_Lock>:
		data[i] = 0;
	}
}

void Flash_Lock()
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 8004b24:	f7fc fdb0 	bl	8001688 <HAL_FLASH_Lock>
}
 8004b28:	bf00      	nop
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <Flash_Unlock>:

void Flash_Unlock()
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8004b30:	f7fc fd84 	bl	800163c <HAL_FLASH_Unlock>
}
 8004b34:	bf00      	nop
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <Flash_Erase>:

void Flash_Erase(uint32_t addr)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	Flash_Unlock();
 8004b40:	f7ff fff4 	bl	8004b2c <Flash_Unlock>
	while((FLASH->SR&FLASH_SR_BSY));
 8004b44:	bf00      	nop
 8004b46:	4b16      	ldr	r3, [pc, #88]	; (8004ba0 <Flash_Erase+0x68>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f9      	bne.n	8004b46 <Flash_Erase+0xe>
	FLASH->CR |= FLASH_CR_PER; //Page Erase Set
 8004b52:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <Flash_Erase+0x68>)
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <Flash_Erase+0x68>)
 8004b58:	f043 0302 	orr.w	r3, r3, #2
 8004b5c:	6113      	str	r3, [r2, #16]
	FLASH->AR = addr; //Page Address
 8004b5e:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <Flash_Erase+0x68>)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <Flash_Erase+0x68>)
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	4a0d      	ldr	r2, [pc, #52]	; (8004ba0 <Flash_Erase+0x68>)
 8004b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b6e:	6113      	str	r3, [r2, #16]
	while((FLASH->SR&FLASH_SR_BSY));
 8004b70:	bf00      	nop
 8004b72:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <Flash_Erase+0x68>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f9      	bne.n	8004b72 <Flash_Erase+0x3a>
	FLASH->CR &= ~FLASH_SR_BSY;
 8004b7e:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <Flash_Erase+0x68>)
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	4a07      	ldr	r2, [pc, #28]	; (8004ba0 <Flash_Erase+0x68>)
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <Flash_Erase+0x68>)
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	4a04      	ldr	r2, [pc, #16]	; (8004ba0 <Flash_Erase+0x68>)
 8004b90:	f023 0302 	bic.w	r3, r3, #2
 8004b94:	6113      	str	r3, [r2, #16]
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40022000 	.word	0x40022000

08004ba4 <Flash_Write_Int>:

void Flash_Write_Int(uint32_t addr, int data)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
	Flash_Unlock();
 8004bae:	f7ff ffbd 	bl	8004b2c <Flash_Unlock>
	FLASH->CR |= FLASH_CR_PG;				/*!< Programming */
 8004bb2:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <Flash_Write_Int+0x58>)
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	4a11      	ldr	r2, [pc, #68]	; (8004bfc <Flash_Write_Int+0x58>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6113      	str	r3, [r2, #16]
	while((FLASH->SR&FLASH_SR_BSY));
 8004bbe:	bf00      	nop
 8004bc0:	4b0e      	ldr	r3, [pc, #56]	; (8004bfc <Flash_Write_Int+0x58>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f9      	bne.n	8004bc0 <Flash_Write_Int+0x1c>
	*(__IO uint16_t*)addr = data;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	801a      	strh	r2, [r3, #0]
	while((FLASH->SR&FLASH_SR_BSY));
 8004bd4:	bf00      	nop
 8004bd6:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <Flash_Write_Int+0x58>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f9      	bne.n	8004bd6 <Flash_Write_Int+0x32>
	FLASH->CR &= ~FLASH_CR_PG;
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <Flash_Write_Int+0x58>)
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <Flash_Write_Int+0x58>)
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	6113      	str	r3, [r2, #16]
	Flash_Lock();
 8004bee:	f7ff ff97 	bl	8004b20 <Flash_Lock>
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40022000 	.word	0x40022000

08004c00 <Flash_Read_Int>:

uint16_t Flash_Read_Int(uint32_t addr)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
	uint16_t* val = (uint16_t *)addr;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60fb      	str	r3, [r7, #12]
	return *val;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	881b      	ldrh	r3, [r3, #0]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr
	...

08004c1c <__NVIC_SystemReset>:
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c20:	f3bf 8f4f 	dsb	sy
}
 8004c24:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <__NVIC_SystemReset+0x24>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c2e:	4904      	ldr	r1, [pc, #16]	; (8004c40 <__NVIC_SystemReset+0x24>)
 8004c30:	4b04      	ldr	r3, [pc, #16]	; (8004c44 <__NVIC_SystemReset+0x28>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c36:	f3bf 8f4f 	dsb	sy
}
 8004c3a:	bf00      	nop
    __NOP();
 8004c3c:	bf00      	nop
 8004c3e:	e7fd      	b.n	8004c3c <__NVIC_SystemReset+0x20>
 8004c40:	e000ed00 	.word	0xe000ed00
 8004c44:	05fa0004 	.word	0x05fa0004

08004c48 <ledBlink>:
uint16_t g_timeBlinkLed = 1000;

void sendAngleToMain(void);
void ledBlink(void);

void ledBlink(void){
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
	static uint32_t lastBlinkTimes = 0;

	if(HAL_GetTick() - lastBlinkTimes >= g_timeBlinkLed){
 8004c4c:	f7fc fb0a 	bl	8001264 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <ledBlink+0x30>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <ledBlink+0x34>)
 8004c5a:	8812      	ldrh	r2, [r2, #0]
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d309      	bcc.n	8004c74 <ledBlink+0x2c>
		lastBlinkTimes = HAL_GetTick();
 8004c60:	f7fc fb00 	bl	8001264 <HAL_GetTick>
 8004c64:	4603      	mov	r3, r0
 8004c66:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <ledBlink+0x30>)
 8004c68:	6013      	str	r3, [r2, #0]
	}
	else{
		return;
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004c6a:	2108      	movs	r1, #8
 8004c6c:	4804      	ldr	r0, [pc, #16]	; (8004c80 <ledBlink+0x38>)
 8004c6e:	f7fc fece 	bl	8001a0e <HAL_GPIO_TogglePin>
 8004c72:	e000      	b.n	8004c76 <ledBlink+0x2e>
		return;
 8004c74:	bf00      	nop

}
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20000154 	.word	0x20000154
 8004c7c:	2000000a 	.word	0x2000000a
 8004c80:	40010800 	.word	0x40010800

08004c84 <mainInit>:
void mainInit(void){
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8004c88:	f7ff ff1a 	bl	8004ac0 <DWT_Delay_Init>
	driffVal.x_Axis = Flash_Read_Int(SAVE_X_AXIS_ADDR);
 8004c8c:	483e      	ldr	r0, [pc, #248]	; (8004d88 <mainInit+0x104>)
 8004c8e:	f7ff ffb7 	bl	8004c00 <Flash_Read_Int>
 8004c92:	4603      	mov	r3, r0
 8004c94:	461a      	mov	r2, r3
 8004c96:	4b3d      	ldr	r3, [pc, #244]	; (8004d8c <mainInit+0x108>)
 8004c98:	601a      	str	r2, [r3, #0]
	driffVal.y_Axis = Flash_Read_Int(SAVE_Y_AXIS_ADDR);
 8004c9a:	483d      	ldr	r0, [pc, #244]	; (8004d90 <mainInit+0x10c>)
 8004c9c:	f7ff ffb0 	bl	8004c00 <Flash_Read_Int>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4b39      	ldr	r3, [pc, #228]	; (8004d8c <mainInit+0x108>)
 8004ca6:	605a      	str	r2, [r3, #4]
	driffVal.z_Axis = Flash_Read_Int(SAVE_Z_AXIS_ADDR);
 8004ca8:	483a      	ldr	r0, [pc, #232]	; (8004d94 <mainInit+0x110>)
 8004caa:	f7ff ffa9 	bl	8004c00 <Flash_Read_Int>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4b36      	ldr	r3, [pc, #216]	; (8004d8c <mainInit+0x108>)
 8004cb4:	609a      	str	r2, [r3, #8]

	if((driffVal.x_Axis == 0xFFFF) || (driffVal.x_Axis == 0xFFFF) || (driffVal.z_Axis == 0xFFFF)){
 8004cb6:	4b35      	ldr	r3, [pc, #212]	; (8004d8c <mainInit+0x108>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <mainInit+0x56>
 8004cc2:	4b32      	ldr	r3, [pc, #200]	; (8004d8c <mainInit+0x108>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d005      	beq.n	8004cda <mainInit+0x56>
 8004cce:	4b2f      	ldr	r3, [pc, #188]	; (8004d8c <mainInit+0x108>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d14a      	bne.n	8004d70 <mainInit+0xec>
		Mpu6050_Init(&hi2c1, &htim2);
 8004cda:	492f      	ldr	r1, [pc, #188]	; (8004d98 <mainInit+0x114>)
 8004cdc:	482f      	ldr	r0, [pc, #188]	; (8004d9c <mainInit+0x118>)
 8004cde:	f7ff fc1b 	bl	8004518 <Mpu6050_Init>
		driffVal.x_Axis = getAntiDriffCoefficient(100, AXIS_X);
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	2064      	movs	r0, #100	; 0x64
 8004ce6:	f7ff fcad 	bl	8004644 <getAntiDriffCoefficient>
 8004cea:	4603      	mov	r3, r0
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fb ff83 	bl	8000bf8 <__aeabi_f2iz>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4a25      	ldr	r2, [pc, #148]	; (8004d8c <mainInit+0x108>)
 8004cf6:	6013      	str	r3, [r2, #0]
		driffVal.x_Axis = -driffVal.x_Axis;
 8004cf8:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <mainInit+0x108>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	425b      	negs	r3, r3
 8004cfe:	4a23      	ldr	r2, [pc, #140]	; (8004d8c <mainInit+0x108>)
 8004d00:	6013      	str	r3, [r2, #0]

		driffVal.y_Axis = getAntiDriffCoefficient(100, AXIS_Y);
 8004d02:	2101      	movs	r1, #1
 8004d04:	2064      	movs	r0, #100	; 0x64
 8004d06:	f7ff fc9d 	bl	8004644 <getAntiDriffCoefficient>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fb ff73 	bl	8000bf8 <__aeabi_f2iz>
 8004d12:	4603      	mov	r3, r0
 8004d14:	4a1d      	ldr	r2, [pc, #116]	; (8004d8c <mainInit+0x108>)
 8004d16:	6053      	str	r3, [r2, #4]
		driffVal.y_Axis = -driffVal.y_Axis;
 8004d18:	4b1c      	ldr	r3, [pc, #112]	; (8004d8c <mainInit+0x108>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	425b      	negs	r3, r3
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <mainInit+0x108>)
 8004d20:	6053      	str	r3, [r2, #4]

		driffVal.z_Axis = getAntiDriffCoefficient(100, AXIS_Z);
 8004d22:	2102      	movs	r1, #2
 8004d24:	2064      	movs	r0, #100	; 0x64
 8004d26:	f7ff fc8d 	bl	8004644 <getAntiDriffCoefficient>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fb ff63 	bl	8000bf8 <__aeabi_f2iz>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4a15      	ldr	r2, [pc, #84]	; (8004d8c <mainInit+0x108>)
 8004d36:	6093      	str	r3, [r2, #8]
		driffVal.z_Axis = -driffVal.z_Axis;
 8004d38:	4b14      	ldr	r3, [pc, #80]	; (8004d8c <mainInit+0x108>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	425b      	negs	r3, r3
 8004d3e:	4a13      	ldr	r2, [pc, #76]	; (8004d8c <mainInit+0x108>)
 8004d40:	6093      	str	r3, [r2, #8]


		Flash_Erase(SAVE_X_AXIS_ADDR);
 8004d42:	4811      	ldr	r0, [pc, #68]	; (8004d88 <mainInit+0x104>)
 8004d44:	f7ff fef8 	bl	8004b38 <Flash_Erase>
		Flash_Write_Int(SAVE_X_AXIS_ADDR, driffVal.x_Axis);
 8004d48:	4b10      	ldr	r3, [pc, #64]	; (8004d8c <mainInit+0x108>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	480e      	ldr	r0, [pc, #56]	; (8004d88 <mainInit+0x104>)
 8004d50:	f7ff ff28 	bl	8004ba4 <Flash_Write_Int>
		Flash_Write_Int(SAVE_Y_AXIS_ADDR, driffVal.y_Axis);
 8004d54:	4b0d      	ldr	r3, [pc, #52]	; (8004d8c <mainInit+0x108>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	480d      	ldr	r0, [pc, #52]	; (8004d90 <mainInit+0x10c>)
 8004d5c:	f7ff ff22 	bl	8004ba4 <Flash_Write_Int>
		Flash_Write_Int(SAVE_Z_AXIS_ADDR, driffVal.z_Axis);
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <mainInit+0x108>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4619      	mov	r1, r3
 8004d66:	480b      	ldr	r0, [pc, #44]	; (8004d94 <mainInit+0x110>)
 8004d68:	f7ff ff1c 	bl	8004ba4 <Flash_Write_Int>
		NVIC_SystemReset();
 8004d6c:	f7ff ff56 	bl	8004c1c <__NVIC_SystemReset>
	}
	else{
		Mpu6050_Init(&hi2c1, &htim2);
 8004d70:	4909      	ldr	r1, [pc, #36]	; (8004d98 <mainInit+0x114>)
 8004d72:	480a      	ldr	r0, [pc, #40]	; (8004d9c <mainInit+0x118>)
 8004d74:	f7ff fbd0 	bl	8004518 <Mpu6050_Init>
	}
	HAL_UART_Receive_IT(&huart1, &u8_Recv, 1);
 8004d78:	2201      	movs	r2, #1
 8004d7a:	4909      	ldr	r1, [pc, #36]	; (8004da0 <mainInit+0x11c>)
 8004d7c:	4809      	ldr	r0, [pc, #36]	; (8004da4 <mainInit+0x120>)
 8004d7e:	f7fe ff4e 	bl	8003c1e <HAL_UART_Receive_IT>
}
 8004d82:	bf00      	nop
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	0801fc00 	.word	0x0801fc00
 8004d8c:	20000144 	.word	0x20000144
 8004d90:	0801fc04 	.word	0x0801fc04
 8004d94:	0801fc08 	.word	0x0801fc08
 8004d98:	2000007c 	.word	0x2000007c
 8004d9c:	20000028 	.word	0x20000028
 8004da0:	20000141 	.word	0x20000141
 8004da4:	200000c4 	.word	0x200000c4

08004da8 <mainProcess>:

void mainProcess(void){
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0


	sendAngleToMain();
 8004dac:	f000 f87e 	bl	8004eac <sendAngleToMain>

	buttonHoldScan();
 8004db0:	f7ff fe44 	bl	8004a3c <buttonHoldScan>

	if(g_buttonEvent == HOLD_1S){
 8004db4:	4b35      	ldr	r3, [pc, #212]	; (8004e8c <mainProcess+0xe4>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d102      	bne.n	8004dc2 <mainProcess+0x1a>
		g_timeBlinkLed = 100;
 8004dbc:	4b34      	ldr	r3, [pc, #208]	; (8004e90 <mainProcess+0xe8>)
 8004dbe:	2264      	movs	r2, #100	; 0x64
 8004dc0:	801a      	strh	r2, [r3, #0]
	}

	ledBlink();
 8004dc2:	f7ff ff41 	bl	8004c48 <ledBlink>

	if(g_buttonEvent == HOLD_3S || g_mcuPollState == CALIB){
 8004dc6:	4b31      	ldr	r3, [pc, #196]	; (8004e8c <mainProcess+0xe4>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d003      	beq.n	8004dd6 <mainProcess+0x2e>
 8004dce:	4b31      	ldr	r3, [pc, #196]	; (8004e94 <mainProcess+0xec>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d158      	bne.n	8004e88 <mainProcess+0xe0>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	2108      	movs	r1, #8
 8004dda:	482f      	ldr	r0, [pc, #188]	; (8004e98 <mainProcess+0xf0>)
 8004ddc:	f7fc fdff 	bl	80019de <HAL_GPIO_WritePin>
		if(g_mcuPollState == CALIB){
 8004de0:	4b2c      	ldr	r3, [pc, #176]	; (8004e94 <mainProcess+0xec>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b05      	cmp	r3, #5
 8004de6:	d104      	bne.n	8004df2 <mainProcess+0x4a>
			HAL_Delay(1000);
 8004de8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dec:	f7fc fa44 	bl	8001278 <HAL_Delay>
 8004df0:	e003      	b.n	8004dfa <mainProcess+0x52>
		}
		else{
			HAL_Delay(5000);
 8004df2:	f241 3088 	movw	r0, #5000	; 0x1388
 8004df6:	f7fc fa3f 	bl	8001278 <HAL_Delay>
		}

		driffVal.x_Axis = getAntiDriffCoefficient(100, AXIS_X);
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	2064      	movs	r0, #100	; 0x64
 8004dfe:	f7ff fc21 	bl	8004644 <getAntiDriffCoefficient>
 8004e02:	4603      	mov	r3, r0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fb fef7 	bl	8000bf8 <__aeabi_f2iz>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4a23      	ldr	r2, [pc, #140]	; (8004e9c <mainProcess+0xf4>)
 8004e0e:	6013      	str	r3, [r2, #0]
		driffVal.x_Axis = -driffVal.x_Axis;
 8004e10:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <mainProcess+0xf4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	425b      	negs	r3, r3
 8004e16:	4a21      	ldr	r2, [pc, #132]	; (8004e9c <mainProcess+0xf4>)
 8004e18:	6013      	str	r3, [r2, #0]

		driffVal.y_Axis = getAntiDriffCoefficient(100, AXIS_Y);
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	2064      	movs	r0, #100	; 0x64
 8004e1e:	f7ff fc11 	bl	8004644 <getAntiDriffCoefficient>
 8004e22:	4603      	mov	r3, r0
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fb fee7 	bl	8000bf8 <__aeabi_f2iz>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4a1b      	ldr	r2, [pc, #108]	; (8004e9c <mainProcess+0xf4>)
 8004e2e:	6053      	str	r3, [r2, #4]
		driffVal.y_Axis = -driffVal.y_Axis;
 8004e30:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <mainProcess+0xf4>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	425b      	negs	r3, r3
 8004e36:	4a19      	ldr	r2, [pc, #100]	; (8004e9c <mainProcess+0xf4>)
 8004e38:	6053      	str	r3, [r2, #4]

		driffVal.z_Axis = getAntiDriffCoefficient(100, AXIS_Z);
 8004e3a:	2102      	movs	r1, #2
 8004e3c:	2064      	movs	r0, #100	; 0x64
 8004e3e:	f7ff fc01 	bl	8004644 <getAntiDriffCoefficient>
 8004e42:	4603      	mov	r3, r0
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fb fed7 	bl	8000bf8 <__aeabi_f2iz>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	4a13      	ldr	r2, [pc, #76]	; (8004e9c <mainProcess+0xf4>)
 8004e4e:	6093      	str	r3, [r2, #8]
		driffVal.z_Axis = -driffVal.z_Axis;
 8004e50:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <mainProcess+0xf4>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	425b      	negs	r3, r3
 8004e56:	4a11      	ldr	r2, [pc, #68]	; (8004e9c <mainProcess+0xf4>)
 8004e58:	6093      	str	r3, [r2, #8]


		Flash_Erase(SAVE_X_AXIS_ADDR);
 8004e5a:	4811      	ldr	r0, [pc, #68]	; (8004ea0 <mainProcess+0xf8>)
 8004e5c:	f7ff fe6c 	bl	8004b38 <Flash_Erase>
		Flash_Write_Int(SAVE_X_AXIS_ADDR, driffVal.x_Axis);
 8004e60:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <mainProcess+0xf4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4619      	mov	r1, r3
 8004e66:	480e      	ldr	r0, [pc, #56]	; (8004ea0 <mainProcess+0xf8>)
 8004e68:	f7ff fe9c 	bl	8004ba4 <Flash_Write_Int>
		Flash_Write_Int(SAVE_Y_AXIS_ADDR, driffVal.y_Axis);
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <mainProcess+0xf4>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4619      	mov	r1, r3
 8004e72:	480c      	ldr	r0, [pc, #48]	; (8004ea4 <mainProcess+0xfc>)
 8004e74:	f7ff fe96 	bl	8004ba4 <Flash_Write_Int>
		Flash_Write_Int(SAVE_Z_AXIS_ADDR, driffVal.z_Axis);
 8004e78:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <mainProcess+0xf4>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	480a      	ldr	r0, [pc, #40]	; (8004ea8 <mainProcess+0x100>)
 8004e80:	f7ff fe90 	bl	8004ba4 <Flash_Write_Int>
		NVIC_SystemReset();
 8004e84:	f7ff feca 	bl	8004c1c <__NVIC_SystemReset>
	}

}
 8004e88:	bf00      	nop
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20000138 	.word	0x20000138
 8004e90:	2000000a 	.word	0x2000000a
 8004e94:	20000150 	.word	0x20000150
 8004e98:	40010800 	.word	0x40010800
 8004e9c:	20000144 	.word	0x20000144
 8004ea0:	0801fc00 	.word	0x0801fc00
 8004ea4:	0801fc04 	.word	0x0801fc04
 8004ea8:	0801fc08 	.word	0x0801fc08

08004eac <sendAngleToMain>:

void sendAngleToMain(void){
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
	static uint32_t lastTimes = 0;
	uint8_t payload[2];
	if(HAL_GetTick() - lastTimes > TIME_SEND_ANGLE){
 8004eb2:	f7fc f9d7 	bl	8001264 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	4b2f      	ldr	r3, [pc, #188]	; (8004f78 <sendAngleToMain+0xcc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b32      	cmp	r3, #50	; 0x32
 8004ec0:	d956      	bls.n	8004f70 <sendAngleToMain+0xc4>
		lastTimes = HAL_GetTick();
 8004ec2:	f7fc f9cf 	bl	8001264 <HAL_GetTick>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4a2b      	ldr	r2, [pc, #172]	; (8004f78 <sendAngleToMain+0xcc>)
 8004eca:	6013      	str	r3, [r2, #0]
	}
	else{
		return;
	}
	switch (g_mcuPollState) {
 8004ecc:	4b2b      	ldr	r3, [pc, #172]	; (8004f7c <sendAngleToMain+0xd0>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d032      	beq.n	8004f3a <sendAngleToMain+0x8e>
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	dc46      	bgt.n	8004f66 <sendAngleToMain+0xba>
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d002      	beq.n	8004ee2 <sendAngleToMain+0x36>
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d016      	beq.n	8004f0e <sendAngleToMain+0x62>
 8004ee0:	e041      	b.n	8004f66 <sendAngleToMain+0xba>
		case GET_X_AXIS:
			g_timeBlinkLed = 150;
 8004ee2:	4b27      	ldr	r3, [pc, #156]	; (8004f80 <sendAngleToMain+0xd4>)
 8004ee4:	2296      	movs	r2, #150	; 0x96
 8004ee6:	801a      	strh	r2, [r3, #0]
			payload[0] = xAngle & 0xFF;
 8004ee8:	4b26      	ldr	r3, [pc, #152]	; (8004f84 <sendAngleToMain+0xd8>)
 8004eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	713b      	strb	r3, [r7, #4]
			payload[1] = (xAngle >> 8) & 0xFF;
 8004ef2:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <sendAngleToMain+0xd8>)
 8004ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ef8:	121b      	asrs	r3, r3, #8
 8004efa:	b21b      	sxth	r3, r3
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	717b      	strb	r3, [r7, #5]
			HAL_UART_Transmit(&huart1, payload, 2, 100);
 8004f00:	1d39      	adds	r1, r7, #4
 8004f02:	2364      	movs	r3, #100	; 0x64
 8004f04:	2202      	movs	r2, #2
 8004f06:	4820      	ldr	r0, [pc, #128]	; (8004f88 <sendAngleToMain+0xdc>)
 8004f08:	f7fe fdf7 	bl	8003afa <HAL_UART_Transmit>
			break;
 8004f0c:	e031      	b.n	8004f72 <sendAngleToMain+0xc6>

		case GET_Y_AXIS:
			g_timeBlinkLed = 150;
 8004f0e:	4b1c      	ldr	r3, [pc, #112]	; (8004f80 <sendAngleToMain+0xd4>)
 8004f10:	2296      	movs	r2, #150	; 0x96
 8004f12:	801a      	strh	r2, [r3, #0]
			payload[0] = yAngle & 0xFF;
 8004f14:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <sendAngleToMain+0xe0>)
 8004f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	713b      	strb	r3, [r7, #4]
			payload[1] = (yAngle >> 8) & 0xFF;
 8004f1e:	4b1b      	ldr	r3, [pc, #108]	; (8004f8c <sendAngleToMain+0xe0>)
 8004f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f24:	121b      	asrs	r3, r3, #8
 8004f26:	b21b      	sxth	r3, r3
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	717b      	strb	r3, [r7, #5]
			HAL_UART_Transmit(&huart1, payload, 2, 100);
 8004f2c:	1d39      	adds	r1, r7, #4
 8004f2e:	2364      	movs	r3, #100	; 0x64
 8004f30:	2202      	movs	r2, #2
 8004f32:	4815      	ldr	r0, [pc, #84]	; (8004f88 <sendAngleToMain+0xdc>)
 8004f34:	f7fe fde1 	bl	8003afa <HAL_UART_Transmit>
			break;
 8004f38:	e01b      	b.n	8004f72 <sendAngleToMain+0xc6>

		case GET_Z_AXIS:
			g_timeBlinkLed = 150;
 8004f3a:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <sendAngleToMain+0xd4>)
 8004f3c:	2296      	movs	r2, #150	; 0x96
 8004f3e:	801a      	strh	r2, [r3, #0]
			payload[0] = zAngle & 0xFF;
 8004f40:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <sendAngleToMain+0xe4>)
 8004f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	713b      	strb	r3, [r7, #4]
			payload[1] = (zAngle >> 8) & 0xFF;
 8004f4a:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <sendAngleToMain+0xe4>)
 8004f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f50:	121b      	asrs	r3, r3, #8
 8004f52:	b21b      	sxth	r3, r3
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	717b      	strb	r3, [r7, #5]
			HAL_UART_Transmit(&huart1, payload, 2, 100);
 8004f58:	1d39      	adds	r1, r7, #4
 8004f5a:	2364      	movs	r3, #100	; 0x64
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	480a      	ldr	r0, [pc, #40]	; (8004f88 <sendAngleToMain+0xdc>)
 8004f60:	f7fe fdcb 	bl	8003afa <HAL_UART_Transmit>
			break;
 8004f64:	e005      	b.n	8004f72 <sendAngleToMain+0xc6>
		default:
			g_timeBlinkLed = 1000;
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <sendAngleToMain+0xd4>)
 8004f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f6c:	801a      	strh	r2, [r3, #0]
			break;
 8004f6e:	e000      	b.n	8004f72 <sendAngleToMain+0xc6>
		return;
 8004f70:	bf00      	nop
	}
}
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20000158 	.word	0x20000158
 8004f7c:	20000150 	.word	0x20000150
 8004f80:	2000000a 	.word	0x2000000a
 8004f84:	20000120 	.word	0x20000120
 8004f88:	200000c4 	.word	0x200000c4
 8004f8c:	20000122 	.word	0x20000122
 8004f90:	20000124 	.word	0x20000124

08004f94 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a30      	ldr	r2, [pc, #192]	; (8005064 <HAL_UART_RxCpltCallback+0xd0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d15a      	bne.n	800505c <HAL_UART_RxCpltCallback+0xc8>
	{
		switch(u8_Recv){
 8004fa6:	4b30      	ldr	r3, [pc, #192]	; (8005068 <HAL_UART_RxCpltCallback+0xd4>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	3b41      	subs	r3, #65	; 0x41
 8004fac:	2b19      	cmp	r3, #25
 8004fae:	d84c      	bhi.n	800504a <HAL_UART_RxCpltCallback+0xb6>
 8004fb0:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <HAL_UART_RxCpltCallback+0x24>)
 8004fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb6:	bf00      	nop
 8004fb8:	08005021 	.word	0x08005021
 8004fbc:	0800504b 	.word	0x0800504b
 8004fc0:	0800504b 	.word	0x0800504b
 8004fc4:	0800504b 	.word	0x0800504b
 8004fc8:	0800504b 	.word	0x0800504b
 8004fcc:	08005043 	.word	0x08005043
 8004fd0:	0800504b 	.word	0x0800504b
 8004fd4:	0800504b 	.word	0x0800504b
 8004fd8:	0800504b 	.word	0x0800504b
 8004fdc:	0800504b 	.word	0x0800504b
 8004fe0:	0800504b 	.word	0x0800504b
 8004fe4:	0800504b 	.word	0x0800504b
 8004fe8:	0800504b 	.word	0x0800504b
 8004fec:	0800504b 	.word	0x0800504b
 8004ff0:	0800504b 	.word	0x0800504b
 8004ff4:	0800504b 	.word	0x0800504b
 8004ff8:	0800504b 	.word	0x0800504b
 8004ffc:	0800504b 	.word	0x0800504b
 8005000:	0800504b 	.word	0x0800504b
 8005004:	0800504b 	.word	0x0800504b
 8005008:	0800504b 	.word	0x0800504b
 800500c:	0800504b 	.word	0x0800504b
 8005010:	0800504b 	.word	0x0800504b
 8005014:	0800502b 	.word	0x0800502b
 8005018:	08005033 	.word	0x08005033
 800501c:	0800503b 	.word	0x0800503b
		case 'A':
			g_mcuPollState = RESET_MCU;
 8005020:	4b12      	ldr	r3, [pc, #72]	; (800506c <HAL_UART_RxCpltCallback+0xd8>)
 8005022:	2204      	movs	r2, #4
 8005024:	701a      	strb	r2, [r3, #0]
			NVIC_SystemReset();
 8005026:	f7ff fdf9 	bl	8004c1c <__NVIC_SystemReset>
			break;
		case 'X':
			g_mcuPollState = GET_X_AXIS;
 800502a:	4b10      	ldr	r3, [pc, #64]	; (800506c <HAL_UART_RxCpltCallback+0xd8>)
 800502c:	2201      	movs	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]
			break;
 8005030:	e00f      	b.n	8005052 <HAL_UART_RxCpltCallback+0xbe>
		case 'Y':
			g_mcuPollState = GET_Y_AXIS;
 8005032:	4b0e      	ldr	r3, [pc, #56]	; (800506c <HAL_UART_RxCpltCallback+0xd8>)
 8005034:	2202      	movs	r2, #2
 8005036:	701a      	strb	r2, [r3, #0]
			break;
 8005038:	e00b      	b.n	8005052 <HAL_UART_RxCpltCallback+0xbe>
		case 'Z':
			g_mcuPollState = GET_Z_AXIS;
 800503a:	4b0c      	ldr	r3, [pc, #48]	; (800506c <HAL_UART_RxCpltCallback+0xd8>)
 800503c:	2203      	movs	r2, #3
 800503e:	701a      	strb	r2, [r3, #0]
			break;
 8005040:	e007      	b.n	8005052 <HAL_UART_RxCpltCallback+0xbe>
		case 'F':
			g_mcuPollState = CALIB;
 8005042:	4b0a      	ldr	r3, [pc, #40]	; (800506c <HAL_UART_RxCpltCallback+0xd8>)
 8005044:	2205      	movs	r2, #5
 8005046:	701a      	strb	r2, [r3, #0]
			break;
 8005048:	e003      	b.n	8005052 <HAL_UART_RxCpltCallback+0xbe>
		default:
			g_mcuPollState = STATE_IDLE;
 800504a:	4b08      	ldr	r3, [pc, #32]	; (800506c <HAL_UART_RxCpltCallback+0xd8>)
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
			break;
 8005050:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart1, &u8_Recv, 1);
 8005052:	2201      	movs	r2, #1
 8005054:	4904      	ldr	r1, [pc, #16]	; (8005068 <HAL_UART_RxCpltCallback+0xd4>)
 8005056:	4806      	ldr	r0, [pc, #24]	; (8005070 <HAL_UART_RxCpltCallback+0xdc>)
 8005058:	f7fe fde1 	bl	8003c1e <HAL_UART_Receive_IT>
	}
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40013800 	.word	0x40013800
 8005068:	20000141 	.word	0x20000141
 800506c:	20000150 	.word	0x20000150
 8005070:	200000c4 	.word	0x200000c4

08005074 <__libc_init_array>:
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	2600      	movs	r6, #0
 8005078:	4d0c      	ldr	r5, [pc, #48]	; (80050ac <__libc_init_array+0x38>)
 800507a:	4c0d      	ldr	r4, [pc, #52]	; (80050b0 <__libc_init_array+0x3c>)
 800507c:	1b64      	subs	r4, r4, r5
 800507e:	10a4      	asrs	r4, r4, #2
 8005080:	42a6      	cmp	r6, r4
 8005082:	d109      	bne.n	8005098 <__libc_init_array+0x24>
 8005084:	f000 f822 	bl	80050cc <_init>
 8005088:	2600      	movs	r6, #0
 800508a:	4d0a      	ldr	r5, [pc, #40]	; (80050b4 <__libc_init_array+0x40>)
 800508c:	4c0a      	ldr	r4, [pc, #40]	; (80050b8 <__libc_init_array+0x44>)
 800508e:	1b64      	subs	r4, r4, r5
 8005090:	10a4      	asrs	r4, r4, #2
 8005092:	42a6      	cmp	r6, r4
 8005094:	d105      	bne.n	80050a2 <__libc_init_array+0x2e>
 8005096:	bd70      	pop	{r4, r5, r6, pc}
 8005098:	f855 3b04 	ldr.w	r3, [r5], #4
 800509c:	4798      	blx	r3
 800509e:	3601      	adds	r6, #1
 80050a0:	e7ee      	b.n	8005080 <__libc_init_array+0xc>
 80050a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a6:	4798      	blx	r3
 80050a8:	3601      	adds	r6, #1
 80050aa:	e7f2      	b.n	8005092 <__libc_init_array+0x1e>
 80050ac:	0800510c 	.word	0x0800510c
 80050b0:	0800510c 	.word	0x0800510c
 80050b4:	0800510c 	.word	0x0800510c
 80050b8:	08005110 	.word	0x08005110

080050bc <memset>:
 80050bc:	4603      	mov	r3, r0
 80050be:	4402      	add	r2, r0
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d100      	bne.n	80050c6 <memset+0xa>
 80050c4:	4770      	bx	lr
 80050c6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ca:	e7f9      	b.n	80050c0 <memset+0x4>

080050cc <_init>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr

080050d8 <_fini>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	bf00      	nop
 80050dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050de:	bc08      	pop	{r3}
 80050e0:	469e      	mov	lr, r3
 80050e2:	4770      	bx	lr
